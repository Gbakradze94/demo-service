* 
* ==> Audit <==
* |------------|--------------------------------|----------|----------------|---------|---------------------|---------------------|
|  Command   |              Args              | Profile  |      User      | Version |     Start Time      |      End Time       |
|------------|--------------------------------|----------|----------------|---------|---------------------|---------------------|
| config     | set driver docker              | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 13:58 +04 | 28 Feb 24 13:58 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 13:58 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:01 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:05 +04 |                     |
| delete     |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:09 +04 | 28 Feb 24 14:09 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:10 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:12 +04 |                     |
| delete     |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:12 +04 | 28 Feb 24 14:12 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:20 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:23 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:24 +04 |                     |
| delete     |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:25 +04 | 28 Feb 24 14:25 +04 |
| start      | --driver=docker                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:25 +04 |                     |
| start      | --force --driver=docker        | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:26 +04 |                     |
| start      | --driver=docker                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:27 +04 |                     |
|            | --container-runtime=containerd |          |                |         |                     |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:29 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:32 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:37 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:38 +04 | 28 Feb 24 14:38 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 14:39 +04 | 28 Feb 24 14:39 +04 |
| service    | spring-boot-app --url          | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 16:08 +04 |                     |
| service    | demo-service --url             | minikube | giorgibakradze | v1.32.0 | 28 Feb 24 16:08 +04 | 28 Feb 24 16:15 +04 |
| docker-env |                                | minikube | giorgibakradze | v1.32.0 | 01 Mar 24 12:50 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 01 Mar 24 12:52 +04 | 01 Mar 24 12:53 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 01 Mar 24 13:25 +04 | 01 Mar 24 13:25 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 01 Mar 24 13:27 +04 | 01 Mar 24 13:29 +04 |
| kubectl    | -- get pods -A                 | minikube | giorgibakradze | v1.32.0 | 01 Mar 24 13:37 +04 | 01 Mar 24 13:37 +04 |
| tunnel     |                                | minikube | giorgibakradze | v1.32.0 | 01 Mar 24 14:34 +04 | 01 Mar 24 14:35 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 01 Mar 24 14:49 +04 | 01 Mar 24 14:49 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 01 Mar 24 15:04 +04 | 01 Mar 24 15:05 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 20:48 +04 |                     |
| delete     |                                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 20:49 +04 | 02 Mar 24 20:49 +04 |
| start      | --driver=docker                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 20:49 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 20:50 +04 |                     |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 20:51 +04 | 02 Mar 24 20:52 +04 |
| start      | --driver=docker                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 21:00 +04 | 02 Mar 24 21:01 +04 |
| docker-env |                                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 21:03 +04 | 02 Mar 24 21:03 +04 |
| config     | set driver docker              | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 21:35 +04 | 02 Mar 24 21:35 +04 |
| delete     |                                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 21:35 +04 | 02 Mar 24 21:35 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 21:35 +04 | 02 Mar 24 21:36 +04 |
| docker-env |                                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 21:47 +04 | 02 Mar 24 21:47 +04 |
| docker-env | minikube docker-env            | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 21:47 +04 | 02 Mar 24 21:47 +04 |
| config     | set driver docker              | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 21:48 +04 | 02 Mar 24 21:48 +04 |
| start      |                                | minikube | giorgibakradze | v1.32.0 | 02 Mar 24 23:21 +04 |                     |
|------------|--------------------------------|----------|----------------|---------|---------------------|---------------------|

* 
* ==> Last Start <==
* Log file created at: 2024/03/02 23:21:33
Running on machine: EPGETBIW0421
Binary: Built with gc go1.21.3 for linux/amd64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0302 23:21:33.687346    4163 out.go:296] Setting OutFile to fd 1 ...
I0302 23:21:33.687471    4163 out.go:348] isatty.IsTerminal(1) = true
I0302 23:21:33.687474    4163 out.go:309] Setting ErrFile to fd 2...
I0302 23:21:33.687476    4163 out.go:348] isatty.IsTerminal(2) = true
I0302 23:21:33.687620    4163 root.go:338] Updating PATH: /home/giorgibakradze/.minikube/bin
I0302 23:21:33.688771    4163 out.go:303] Setting JSON to false
I0302 23:21:33.689147    4163 start.go:128] hostinfo: {"hostname":"EPGETBIW0421","uptime":898,"bootTime":1709406395,"procs":9,"os":"linux","platform":"ubuntu","platformFamily":"debian","platformVersion":"20.04","kernelVersion":"5.10.102.1-microsoft-standard-WSL2","kernelArch":"x86_64","virtualizationSystem":"","virtualizationRole":"","hostId":"1203976d-5047-6a6e-e713-05e365df029b"}
I0302 23:21:33.689186    4163 start.go:138] virtualization:  
I0302 23:21:33.690929    4163 out.go:177] 😄  minikube v1.32.0 on Ubuntu 20.04
I0302 23:21:33.693255    4163 notify.go:220] Checking for updates...
I0302 23:21:33.693630    4163 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.28.3
I0302 23:21:33.694539    4163 driver.go:378] Setting default libvirt URI to qemu:///system
I0302 23:21:33.708889    4163 docker.go:122] docker version: linux-25.0.3:Docker Engine - Community
I0302 23:21:33.708942    4163 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0302 23:21:33.740110    4163 info.go:266] docker info: {ID:1ba49897-d2c8-423e-bbaf-d3e323b448a9 Containers:1 ContainersRunning:0 ContainersPaused:0 ContainersStopped:1 Images:2 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:24 OomKillDisable:true NGoroutines:52 SystemTime:2024-03-02 23:21:33.734563073 +0400 +04 LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:0 KernelVersion:5.10.102.1-microsoft-standard-WSL2 OperatingSystem:Ubuntu 20.04.6 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:26475536384 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:EPGETBIW0421 Labels:[] ExperimentalBuild:false ServerVersion:25.0.3 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:ae07eda36dd25f8a1b98dfbf587313b99c0190bb Expected:ae07eda36dd25f8a1b98dfbf587313b99c0190bb} RuncCommit:{ID:v1.1.12-0-g51d5e94 Expected:v1.1.12-0-g51d5e94} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=builtin] ProductLicense: Warnings:[WARNING: No blkio throttle.read_bps_device support WARNING: No blkio throttle.write_bps_device support WARNING: No blkio throttle.read_iops_device support WARNING: No blkio throttle.write_iops_device support] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/usr/libexec/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.12.1] map[Name:compose Path:/usr/libexec/docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.24.6]] Warnings:<nil>}}
I0302 23:21:33.740164    4163 docker.go:295] overlay module found
I0302 23:21:33.741640    4163 out.go:177] ✨  Using the docker driver based on existing profile
I0302 23:21:33.742914    4163 start.go:298] selected driver: docker
I0302 23:21:33.742919    4163 start.go:902] validating driver "docker" against &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 Memory:6300 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.28.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[default-storageclass:true storage-provisioner:true] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/giorgibakradze:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 AutoPauseInterval:1m0s GPUs:}
I0302 23:21:33.742979    4163 start.go:913] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0302 23:21:33.743026    4163 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0302 23:21:33.771689    4163 info.go:266] docker info: {ID:1ba49897-d2c8-423e-bbaf-d3e323b448a9 Containers:1 ContainersRunning:0 ContainersPaused:0 ContainersStopped:1 Images:2 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:24 OomKillDisable:true NGoroutines:52 SystemTime:2024-03-02 23:21:33.766814019 +0400 +04 LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:0 KernelVersion:5.10.102.1-microsoft-standard-WSL2 OperatingSystem:Ubuntu 20.04.6 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:26475536384 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:EPGETBIW0421 Labels:[] ExperimentalBuild:false ServerVersion:25.0.3 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:ae07eda36dd25f8a1b98dfbf587313b99c0190bb Expected:ae07eda36dd25f8a1b98dfbf587313b99c0190bb} RuncCommit:{ID:v1.1.12-0-g51d5e94 Expected:v1.1.12-0-g51d5e94} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=builtin] ProductLicense: Warnings:[WARNING: No blkio throttle.read_bps_device support WARNING: No blkio throttle.write_bps_device support WARNING: No blkio throttle.read_iops_device support WARNING: No blkio throttle.write_iops_device support] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/usr/libexec/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.12.1] map[Name:compose Path:/usr/libexec/docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.24.6]] Warnings:<nil>}}
I0302 23:21:33.772090    4163 cni.go:84] Creating CNI manager for ""
I0302 23:21:33.772098    4163 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0302 23:21:33.772105    4163 start_flags.go:323] config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 Memory:6300 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.28.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[default-storageclass:true storage-provisioner:true] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/giorgibakradze:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 AutoPauseInterval:1m0s GPUs:}
I0302 23:21:33.773911    4163 out.go:177] 👍  Starting control plane node minikube in cluster minikube
I0302 23:21:33.775109    4163 cache.go:121] Beginning downloading kic base image for docker with docker
I0302 23:21:33.776292    4163 out.go:177] 🚜  Pulling base image ...
I0302 23:21:33.777479    4163 preload.go:132] Checking if preload exists for k8s version v1.28.3 and runtime docker
I0302 23:21:33.777515    4163 preload.go:148] Found local preload: /home/giorgibakradze/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4
I0302 23:21:33.777522    4163 cache.go:56] Caching tarball of preloaded images
I0302 23:21:33.777569    4163 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 in local docker daemon
I0302 23:21:33.777617    4163 preload.go:174] Found /home/giorgibakradze/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4 in cache, skipping download
I0302 23:21:33.777622    4163 cache.go:59] Finished verifying existence of preloaded tar for  v1.28.3 on docker
I0302 23:21:33.777679    4163 profile.go:148] Saving config to /home/giorgibakradze/.minikube/profiles/minikube/config.json ...
I0302 23:21:33.786534    4163 cache.go:149] Downloading gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 to local cache
I0302 23:21:33.786663    4163 image.go:63] Checking for gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 in local cache directory
I0302 23:21:33.787176    4163 image.go:66] Found gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 in local cache directory, skipping pull
I0302 23:21:33.787183    4163 image.go:105] gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 exists in cache, skipping pull
I0302 23:21:33.787209    4163 cache.go:152] successfully saved gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 as a tarball
I0302 23:21:33.787212    4163 cache.go:162] Loading gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 from local cache
I0302 23:21:43.677645    4163 cache.go:164] successfully loaded and using gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 from cached tarball
I0302 23:21:43.677660    4163 cache.go:194] Successfully downloaded all kic artifacts
I0302 23:21:43.678061    4163 start.go:365] acquiring machines lock for minikube: {Name:mke94f658b0d786ee85dd4d7a6e9c9e91996e3f5 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0302 23:21:43.678617    4163 start.go:369] acquired machines lock for "minikube" in 529.411µs
I0302 23:21:43.678635    4163 start.go:96] Skipping create...Using existing machine configuration
I0302 23:21:43.678638    4163 fix.go:54] fixHost starting: 
I0302 23:21:43.678798    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:43.689214    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:21:43.690488    4163 fix.go:102] recreateIfNeeded on minikube: state= err=unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:43.690505    4163 fix.go:107] machineExists: false. err=machine does not exist
I0302 23:21:43.691932    4163 out.go:177] 🤷  docker "minikube" container is missing, will recreate.
I0302 23:21:43.693086    4163 delete.go:124] DEMOLISHING minikube ...
I0302 23:21:43.693131    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:43.702063    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
W0302 23:21:43.702104    4163 stop.go:75] unable to get state: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:43.702114    4163 delete.go:128] stophost failed (probably ok): ssh power off: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:43.702336    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:43.711952    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:21:43.712007    4163 delete.go:82] Unable to get host status for minikube, assuming it has already been deleted: state: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:43.712051    4163 cli_runner.go:164] Run: docker container inspect -f {{.Id}} minikube
W0302 23:21:43.721381    4163 cli_runner.go:211] docker container inspect -f {{.Id}} minikube returned with exit code 1
I0302 23:21:43.721401    4163 kic.go:371] could not find the container minikube to remove it. will try anyways
I0302 23:21:43.721430    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:43.730369    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
W0302 23:21:43.730409    4163 oci.go:84] error getting container status, will try to delete anyways: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:43.730469    4163 cli_runner.go:164] Run: docker exec --privileged -t minikube /bin/bash -c "sudo init 0"
W0302 23:21:43.739516    4163 cli_runner.go:211] docker exec --privileged -t minikube /bin/bash -c "sudo init 0" returned with exit code 1
I0302 23:21:43.739535    4163 oci.go:650] error shutdown minikube: docker exec --privileged -t minikube /bin/bash -c "sudo init 0": exit status 1
stdout:

stderr:
Error response from daemon: No such container: minikube
I0302 23:21:44.740071    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:44.755011    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:21:44.755064    4163 oci.go:662] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:44.755071    4163 oci.go:664] temporary error: container minikube status is  but expect it to be exited
I0302 23:21:44.755117    4163 retry.go:31] will retry after 417.078822ms: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:45.172675    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:45.185433    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:21:45.185470    4163 oci.go:662] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:45.185477    4163 oci.go:664] temporary error: container minikube status is  but expect it to be exited
I0302 23:21:45.185493    4163 retry.go:31] will retry after 467.116499ms: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:45.653202    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:45.665628    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:21:45.665661    4163 oci.go:662] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:45.665667    4163 oci.go:664] temporary error: container minikube status is  but expect it to be exited
I0302 23:21:45.665686    4163 retry.go:31] will retry after 833.449753ms: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:46.499974    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:46.511584    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:21:46.511617    4163 oci.go:662] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:46.511621    4163 oci.go:664] temporary error: container minikube status is  but expect it to be exited
I0302 23:21:46.511637    4163 retry.go:31] will retry after 1.31686661s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:47.829367    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:47.841980    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:21:47.842024    4163 oci.go:662] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:47.842028    4163 oci.go:664] temporary error: container minikube status is  but expect it to be exited
I0302 23:21:47.842044    4163 retry.go:31] will retry after 1.550814382s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:49.393602    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:49.405960    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:21:49.405995    4163 oci.go:662] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:49.405999    4163 oci.go:664] temporary error: container minikube status is  but expect it to be exited
I0302 23:21:49.406015    4163 retry.go:31] will retry after 3.552527583s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:52.960642    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:52.974525    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:21:52.974556    4163 oci.go:662] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:52.974561    4163 oci.go:664] temporary error: container minikube status is  but expect it to be exited
I0302 23:21:52.974575    4163 retry.go:31] will retry after 6.953015428s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:59.928712    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:21:59.941249    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:21:59.941284    4163 oci.go:662] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:21:59.941293    4163 oci.go:664] temporary error: container minikube status is  but expect it to be exited
I0302 23:21:59.941311    4163 retry.go:31] will retry after 4.547316357s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:22:04.489090    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:22:04.503478    4163 cli_runner.go:211] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0302 23:22:04.503525    4163 oci.go:662] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
I0302 23:22:04.503531    4163 oci.go:664] temporary error: container minikube status is  but expect it to be exited
I0302 23:22:04.503564    4163 oci.go:88] couldn't shut down minikube (might be okay): verify shutdown: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error response from daemon: No such container: minikube
 
I0302 23:22:04.503605    4163 cli_runner.go:164] Run: docker rm -f -v minikube
I0302 23:22:04.514211    4163 cli_runner.go:164] Run: docker container inspect -f {{.Id}} minikube
W0302 23:22:04.522935    4163 cli_runner.go:211] docker container inspect -f {{.Id}} minikube returned with exit code 1
I0302 23:22:04.522974    4163 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0302 23:22:04.533075    4163 cli_runner.go:211] docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0302 23:22:04.533108    4163 network_create.go:281] running [docker network inspect minikube] to gather additional debugging logs...
I0302 23:22:04.533118    4163 cli_runner.go:164] Run: docker network inspect minikube
W0302 23:22:04.541665    4163 cli_runner.go:211] docker network inspect minikube returned with exit code 1
I0302 23:22:04.541678    4163 network_create.go:284] error running [docker network inspect minikube]: docker network inspect minikube: exit status 1
stdout:
[]

stderr:
Error response from daemon: network minikube not found
I0302 23:22:04.541688    4163 network_create.go:286] output of [docker network inspect minikube]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error response from daemon: network minikube not found

** /stderr **
I0302 23:22:04.541847    4163 fix.go:114] Sleeping 1 second for extra luck!
I0302 23:22:05.542199    4163 start.go:125] createHost starting for "" (driver="docker")
I0302 23:22:05.553094    4163 out.go:204] 🔥  Creating docker container (CPUs=2, Memory=6300MB) ...
I0302 23:22:05.554100    4163 start.go:159] libmachine.API.Create for "minikube" (driver="docker")
I0302 23:22:05.554127    4163 client.go:168] LocalClient.Create starting
I0302 23:22:05.554672    4163 main.go:141] libmachine: Reading certificate data from /home/giorgibakradze/.minikube/certs/ca.pem
I0302 23:22:05.554986    4163 main.go:141] libmachine: Decoding PEM data...
I0302 23:22:05.554996    4163 main.go:141] libmachine: Parsing certificate...
I0302 23:22:05.555041    4163 main.go:141] libmachine: Reading certificate data from /home/giorgibakradze/.minikube/certs/cert.pem
I0302 23:22:05.555329    4163 main.go:141] libmachine: Decoding PEM data...
I0302 23:22:05.555337    4163 main.go:141] libmachine: Parsing certificate...
I0302 23:22:05.555543    4163 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0302 23:22:05.566216    4163 cli_runner.go:211] docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0302 23:22:05.566254    4163 network_create.go:281] running [docker network inspect minikube] to gather additional debugging logs...
I0302 23:22:05.566263    4163 cli_runner.go:164] Run: docker network inspect minikube
W0302 23:22:05.574996    4163 cli_runner.go:211] docker network inspect minikube returned with exit code 1
I0302 23:22:05.575009    4163 network_create.go:284] error running [docker network inspect minikube]: docker network inspect minikube: exit status 1
stdout:
[]

stderr:
Error response from daemon: network minikube not found
I0302 23:22:05.575015    4163 network_create.go:286] output of [docker network inspect minikube]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error response from daemon: network minikube not found

** /stderr **
I0302 23:22:05.575068    4163 cli_runner.go:164] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0302 23:22:05.584113    4163 network.go:209] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:0xc00249daf0}
I0302 23:22:05.584141    4163 network_create.go:124] attempt to create docker network minikube 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 1500 ...
I0302 23:22:05.584167    4163 cli_runner.go:164] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube minikube
I0302 23:22:05.612048    4163 network_create.go:108] docker network minikube 192.168.49.0/24 created
I0302 23:22:05.612330    4163 kic.go:121] calculated static IP "192.168.49.2" for the "minikube" container
I0302 23:22:05.612520    4163 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I0302 23:22:05.621072    4163 cli_runner.go:164] Run: docker volume create minikube --label name.minikube.sigs.k8s.io=minikube --label created_by.minikube.sigs.k8s.io=true
I0302 23:22:05.631237    4163 oci.go:103] Successfully created a docker volume minikube
I0302 23:22:05.631277    4163 cli_runner.go:164] Run: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 -d /var/lib
I0302 23:22:06.842254    4163 cli_runner.go:217] Completed: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 -d /var/lib: (1.210955448s)
I0302 23:22:06.842268    4163 oci.go:107] Successfully prepared a docker volume minikube
I0302 23:22:06.842295    4163 preload.go:132] Checking if preload exists for k8s version v1.28.3 and runtime docker
I0302 23:22:06.842309    4163 kic.go:194] Starting extracting preloaded images to volume ...
I0302 23:22:06.842340    4163 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v /home/giorgibakradze/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 -I lz4 -xf /preloaded.tar -C /extractDir
I0302 23:22:10.341324    4163 cli_runner.go:217] Completed: docker run --rm --entrypoint /usr/bin/tar -v /home/giorgibakradze/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.28.3-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 -I lz4 -xf /preloaded.tar -C /extractDir: (3.49895264s)
I0302 23:22:10.341344    4163 kic.go:203] duration metric: took 3.499030 seconds to extract preloaded images to volume
W0302 23:22:10.341506    4163 cgroups_linux.go:77] Your kernel does not support swap limit capabilities or the cgroup is not mounted.
I0302 23:22:10.341554    4163 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I0302 23:22:10.369727    4163 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --memory=6300mb --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0
I0302 23:22:10.651489    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Running}}
I0302 23:22:10.665868    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0302 23:22:10.678610    4163 cli_runner.go:164] Run: docker exec minikube stat /var/lib/dpkg/alternatives/iptables
I0302 23:22:10.756451    4163 oci.go:144] the created container "minikube" has a running status.
I0302 23:22:10.756468    4163 kic.go:225] Creating ssh key for kic: /home/giorgibakradze/.minikube/machines/minikube/id_rsa...
I0302 23:22:11.013580    4163 kic_runner.go:191] docker (temp): /home/giorgibakradze/.minikube/machines/minikube/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0302 23:22:11.033191    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0302 23:22:11.048187    4163 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0302 23:22:11.048196    4163 kic_runner.go:114] Args: [docker exec --privileged minikube chown docker:docker /home/docker/.ssh/authorized_keys]
I0302 23:22:11.177777    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0302 23:22:11.190826    4163 machine.go:88] provisioning docker machine ...
I0302 23:22:11.190860    4163 ubuntu.go:169] provisioning hostname "minikube"
I0302 23:22:11.190903    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:11.210051    4163 main.go:141] libmachine: Using SSH client type: native
I0302 23:22:11.210499    4163 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0302 23:22:11.210509    4163 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0302 23:22:11.315808    4163 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I0302 23:22:11.315870    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:11.330802    4163 main.go:141] libmachine: Using SSH client type: native
I0302 23:22:11.331119    4163 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0302 23:22:11.331128    4163 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0302 23:22:11.407544    4163 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0302 23:22:11.407568    4163 ubuntu.go:175] set auth options {CertDir:/home/giorgibakradze/.minikube CaCertPath:/home/giorgibakradze/.minikube/certs/ca.pem CaPrivateKeyPath:/home/giorgibakradze/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/giorgibakradze/.minikube/machines/server.pem ServerKeyPath:/home/giorgibakradze/.minikube/machines/server-key.pem ClientKeyPath:/home/giorgibakradze/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/giorgibakradze/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/giorgibakradze/.minikube}
I0302 23:22:11.407582    4163 ubuntu.go:177] setting up certificates
I0302 23:22:11.407590    4163 provision.go:83] configureAuth start
I0302 23:22:11.407630    4163 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0302 23:22:11.418023    4163 provision.go:138] copyHostCerts
I0302 23:22:11.418077    4163 exec_runner.go:144] found /home/giorgibakradze/.minikube/ca.pem, removing ...
I0302 23:22:11.418083    4163 exec_runner.go:203] rm: /home/giorgibakradze/.minikube/ca.pem
I0302 23:22:11.418128    4163 exec_runner.go:151] cp: /home/giorgibakradze/.minikube/certs/ca.pem --> /home/giorgibakradze/.minikube/ca.pem (1099 bytes)
I0302 23:22:11.418196    4163 exec_runner.go:144] found /home/giorgibakradze/.minikube/cert.pem, removing ...
I0302 23:22:11.418199    4163 exec_runner.go:203] rm: /home/giorgibakradze/.minikube/cert.pem
I0302 23:22:11.418220    4163 exec_runner.go:151] cp: /home/giorgibakradze/.minikube/certs/cert.pem --> /home/giorgibakradze/.minikube/cert.pem (1143 bytes)
I0302 23:22:11.418261    4163 exec_runner.go:144] found /home/giorgibakradze/.minikube/key.pem, removing ...
I0302 23:22:11.418264    4163 exec_runner.go:203] rm: /home/giorgibakradze/.minikube/key.pem
I0302 23:22:11.418283    4163 exec_runner.go:151] cp: /home/giorgibakradze/.minikube/certs/key.pem --> /home/giorgibakradze/.minikube/key.pem (1679 bytes)
I0302 23:22:11.418695    4163 provision.go:112] generating server cert: /home/giorgibakradze/.minikube/machines/server.pem ca-key=/home/giorgibakradze/.minikube/certs/ca.pem private-key=/home/giorgibakradze/.minikube/certs/ca-key.pem org=giorgibakradze.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0302 23:22:11.480098    4163 provision.go:172] copyRemoteCerts
I0302 23:22:11.480135    4163 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0302 23:22:11.480162    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:11.489408    4163 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/giorgibakradze/.minikube/machines/minikube/id_rsa Username:docker}
I0302 23:22:11.578243    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/machines/server.pem --> /etc/docker/server.pem (1224 bytes)
I0302 23:22:11.594893    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1675 bytes)
I0302 23:22:11.609802    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1099 bytes)
I0302 23:22:11.624945    4163 provision.go:86] duration metric: configureAuth took 217.346354ms
I0302 23:22:11.624958    4163 ubuntu.go:193] setting minikube options for container-runtime
I0302 23:22:11.625056    4163 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.28.3
I0302 23:22:11.625082    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:11.637305    4163 main.go:141] libmachine: Using SSH client type: native
I0302 23:22:11.637570    4163 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0302 23:22:11.637579    4163 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0302 23:22:11.747150    4163 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0302 23:22:11.747169    4163 ubuntu.go:71] root file system type: overlay
I0302 23:22:11.747292    4163 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0302 23:22:11.747346    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:11.758526    4163 main.go:141] libmachine: Using SSH client type: native
I0302 23:22:11.758766    4163 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0302 23:22:11.758805    4163 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0302 23:22:11.877121    4163 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0302 23:22:11.877170    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:11.887361    4163 main.go:141] libmachine: Using SSH client type: native
I0302 23:22:11.887605    4163 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0302 23:22:11.887613    4163 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0302 23:22:12.503092    4163 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2023-10-26 09:06:22.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2024-03-02 19:22:11.860645115 +0000
@@ -1,30 +1,32 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service time-set.target
-Wants=network-online.target containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
+Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutStartSec=0
-RestartSec=2
-Restart=always
+Restart=on-failure
 
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
@@ -32,16 +34,16 @@
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0302 23:22:12.503113    4163 machine.go:91] provisioned docker machine in 1.312276714s
I0302 23:22:12.503119    4163 client.go:171] LocalClient.Create took 6.948988102s
I0302 23:22:12.503140    4163 start.go:167] duration metric: libmachine.API.Create for "minikube" took 6.949047932s
I0302 23:22:12.503144    4163 start.go:300] post-start starting for "minikube" (driver="docker")
I0302 23:22:12.503149    4163 start.go:329] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0302 23:22:12.503180    4163 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0302 23:22:12.503200    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:12.513232    4163 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/giorgibakradze/.minikube/machines/minikube/id_rsa Username:docker}
I0302 23:22:12.549820    4163 ssh_runner.go:195] Run: cat /etc/os-release
I0302 23:22:12.552033    4163 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0302 23:22:12.552047    4163 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0302 23:22:12.552052    4163 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0302 23:22:12.552055    4163 info.go:137] Remote host: Ubuntu 22.04.3 LTS
I0302 23:22:12.552062    4163 filesync.go:126] Scanning /home/giorgibakradze/.minikube/addons for local assets ...
I0302 23:22:12.552379    4163 filesync.go:126] Scanning /home/giorgibakradze/.minikube/files for local assets ...
I0302 23:22:12.552561    4163 start.go:303] post-start completed in 49.412387ms
I0302 23:22:12.552733    4163 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0302 23:22:12.561912    4163 profile.go:148] Saving config to /home/giorgibakradze/.minikube/profiles/minikube/config.json ...
I0302 23:22:12.562067    4163 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0302 23:22:12.562088    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:12.571108    4163 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/giorgibakradze/.minikube/machines/minikube/id_rsa Username:docker}
I0302 23:22:12.603125    4163 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0302 23:22:12.605647    4163 start.go:128] duration metric: createHost completed in 7.063423642s
I0302 23:22:12.605683    4163 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
W0302 23:22:12.615918    4163 fix.go:128] unexpected machine state, will restart: <nil>
I0302 23:22:12.615928    4163 machine.go:88] provisioning docker machine ...
I0302 23:22:12.615948    4163 ubuntu.go:169] provisioning hostname "minikube"
I0302 23:22:12.615977    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:12.625925    4163 main.go:141] libmachine: Using SSH client type: native
I0302 23:22:12.626164    4163 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0302 23:22:12.626169    4163 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0302 23:22:12.695092    4163 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I0302 23:22:12.695155    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:12.704134    4163 main.go:141] libmachine: Using SSH client type: native
I0302 23:22:12.704378    4163 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0302 23:22:12.704386    4163 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0302 23:22:12.764792    4163 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0302 23:22:12.764824    4163 ubuntu.go:175] set auth options {CertDir:/home/giorgibakradze/.minikube CaCertPath:/home/giorgibakradze/.minikube/certs/ca.pem CaPrivateKeyPath:/home/giorgibakradze/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/giorgibakradze/.minikube/machines/server.pem ServerKeyPath:/home/giorgibakradze/.minikube/machines/server-key.pem ClientKeyPath:/home/giorgibakradze/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/giorgibakradze/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/giorgibakradze/.minikube}
I0302 23:22:12.764836    4163 ubuntu.go:177] setting up certificates
I0302 23:22:12.764846    4163 provision.go:83] configureAuth start
I0302 23:22:12.764885    4163 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0302 23:22:12.773888    4163 provision.go:138] copyHostCerts
I0302 23:22:12.773916    4163 exec_runner.go:144] found /home/giorgibakradze/.minikube/ca.pem, removing ...
I0302 23:22:12.773920    4163 exec_runner.go:203] rm: /home/giorgibakradze/.minikube/ca.pem
I0302 23:22:12.773967    4163 exec_runner.go:151] cp: /home/giorgibakradze/.minikube/certs/ca.pem --> /home/giorgibakradze/.minikube/ca.pem (1099 bytes)
I0302 23:22:12.774014    4163 exec_runner.go:144] found /home/giorgibakradze/.minikube/cert.pem, removing ...
I0302 23:22:12.774016    4163 exec_runner.go:203] rm: /home/giorgibakradze/.minikube/cert.pem
I0302 23:22:12.774032    4163 exec_runner.go:151] cp: /home/giorgibakradze/.minikube/certs/cert.pem --> /home/giorgibakradze/.minikube/cert.pem (1143 bytes)
I0302 23:22:12.774087    4163 exec_runner.go:144] found /home/giorgibakradze/.minikube/key.pem, removing ...
I0302 23:22:12.774089    4163 exec_runner.go:203] rm: /home/giorgibakradze/.minikube/key.pem
I0302 23:22:12.774106    4163 exec_runner.go:151] cp: /home/giorgibakradze/.minikube/certs/key.pem --> /home/giorgibakradze/.minikube/key.pem (1679 bytes)
I0302 23:22:12.774125    4163 provision.go:112] generating server cert: /home/giorgibakradze/.minikube/machines/server.pem ca-key=/home/giorgibakradze/.minikube/certs/ca.pem private-key=/home/giorgibakradze/.minikube/certs/ca-key.pem org=giorgibakradze.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0302 23:22:12.838383    4163 provision.go:172] copyRemoteCerts
I0302 23:22:12.838417    4163 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0302 23:22:12.838440    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:12.849712    4163 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/giorgibakradze/.minikube/machines/minikube/id_rsa Username:docker}
I0302 23:22:12.931873    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1099 bytes)
I0302 23:22:12.948056    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/machines/server.pem --> /etc/docker/server.pem (1220 bytes)
I0302 23:22:12.963731    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1675 bytes)
I0302 23:22:12.978259    4163 provision.go:86] duration metric: configureAuth took 213.404203ms
I0302 23:22:12.978271    4163 ubuntu.go:193] setting minikube options for container-runtime
I0302 23:22:12.978376    4163 config.go:182] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.28.3
I0302 23:22:12.978416    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:12.987623    4163 main.go:141] libmachine: Using SSH client type: native
I0302 23:22:12.987859    4163 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0302 23:22:12.987863    4163 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0302 23:22:13.107589    4163 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0302 23:22:13.107610    4163 ubuntu.go:71] root file system type: overlay
I0302 23:22:13.107787    4163 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0302 23:22:13.107866    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:13.118564    4163 main.go:141] libmachine: Using SSH client type: native
I0302 23:22:13.118805    4163 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0302 23:22:13.118842    4163 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0302 23:22:13.232435    4163 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0302 23:22:13.232474    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:13.242011    4163 main.go:141] libmachine: Using SSH client type: native
I0302 23:22:13.242256    4163 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x808a40] 0x80b720 <nil>  [] 0s} 127.0.0.1 32772 <nil> <nil>}
I0302 23:22:13.242264    4163 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0302 23:22:13.305958    4163 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0302 23:22:13.305981    4163 machine.go:91] provisioned docker machine in 690.048499ms
I0302 23:22:13.305986    4163 start.go:300] post-start starting for "minikube" (driver="docker")
I0302 23:22:13.305993    4163 start.go:329] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0302 23:22:13.306025    4163 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0302 23:22:13.306045    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:13.315923    4163 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/giorgibakradze/.minikube/machines/minikube/id_rsa Username:docker}
I0302 23:22:13.402866    4163 ssh_runner.go:195] Run: cat /etc/os-release
I0302 23:22:13.405075    4163 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0302 23:22:13.405088    4163 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0302 23:22:13.405092    4163 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0302 23:22:13.405095    4163 info.go:137] Remote host: Ubuntu 22.04.3 LTS
I0302 23:22:13.405101    4163 filesync.go:126] Scanning /home/giorgibakradze/.minikube/addons for local assets ...
I0302 23:22:13.405125    4163 filesync.go:126] Scanning /home/giorgibakradze/.minikube/files for local assets ...
I0302 23:22:13.405132    4163 start.go:303] post-start completed in 99.14212ms
I0302 23:22:13.405156    4163 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0302 23:22:13.405175    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:13.414488    4163 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/giorgibakradze/.minikube/machines/minikube/id_rsa Username:docker}
I0302 23:22:13.493774    4163 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0302 23:22:13.496815    4163 fix.go:56] fixHost completed within 29.818173057s
I0302 23:22:13.496825    4163 start.go:83] releasing machines lock for "minikube", held for 29.818197342s
I0302 23:22:13.496858    4163 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0302 23:22:13.505904    4163 ssh_runner.go:195] Run: cat /version.json
I0302 23:22:13.505940    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:13.505974    4163 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0302 23:22:13.506013    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0302 23:22:13.516253    4163 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/giorgibakradze/.minikube/machines/minikube/id_rsa Username:docker}
I0302 23:22:13.516281    4163 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32772 SSHKeyPath:/home/giorgibakradze/.minikube/machines/minikube/id_rsa Username:docker}
I0302 23:22:13.595340    4163 ssh_runner.go:195] Run: systemctl --version
I0302 23:22:13.598797    4163 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0302 23:22:13.601601    4163 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0302 23:22:14.065281    4163 cni.go:230] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0302 23:22:14.065361    4163 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%!p(MISSING), " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0302 23:22:14.099454    4163 cni.go:262] disabled [/etc/cni/net.d/87-podman-bridge.conflist, /etc/cni/net.d/100-crio-bridge.conf] bridge cni config(s)
I0302 23:22:14.099466    4163 start.go:472] detecting cgroup driver to use...
I0302 23:22:14.099484    4163 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0302 23:22:14.099550    4163 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0302 23:22:14.110544    4163 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.9"|' /etc/containerd/config.toml"
I0302 23:22:14.116968    4163 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0302 23:22:14.123282    4163 containerd.go:145] configuring containerd to use "cgroupfs" as cgroup driver...
I0302 23:22:14.123310    4163 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = false|g' /etc/containerd/config.toml"
I0302 23:22:14.129497    4163 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0302 23:22:14.135764    4163 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0302 23:22:14.141979    4163 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0302 23:22:14.148001    4163 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0302 23:22:14.153707    4163 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0302 23:22:14.159684    4163 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0302 23:22:14.165930    4163 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0302 23:22:14.171388    4163 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0302 23:22:14.249268    4163 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0302 23:22:14.336372    4163 start.go:472] detecting cgroup driver to use...
I0302 23:22:14.336404    4163 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0302 23:22:14.336437    4163 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0302 23:22:14.344362    4163 cruntime.go:279] skipping containerd shutdown because we are bound to it
I0302 23:22:14.344404    4163 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0302 23:22:14.352902    4163 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0302 23:22:14.364000    4163 ssh_runner.go:195] Run: which cri-dockerd
I0302 23:22:14.367008    4163 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0302 23:22:14.373186    4163 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (189 bytes)
I0302 23:22:14.384897    4163 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0302 23:22:14.479220    4163 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0302 23:22:14.560977    4163 docker.go:560] configuring docker to use "cgroupfs" as cgroup driver...
I0302 23:22:14.561073    4163 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (130 bytes)
I0302 23:22:14.576672    4163 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0302 23:22:14.651073    4163 ssh_runner.go:195] Run: sudo systemctl restart docker
I0302 23:22:14.800613    4163 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0302 23:22:14.880731    4163 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0302 23:22:14.969135    4163 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0302 23:22:15.085692    4163 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0302 23:22:15.161568    4163 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0302 23:22:15.172113    4163 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0302 23:22:15.250726    4163 ssh_runner.go:195] Run: sudo systemctl restart cri-docker
I0302 23:22:15.297263    4163 start.go:519] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0302 23:22:15.297317    4163 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0302 23:22:15.299582    4163 start.go:540] Will wait 60s for crictl version
I0302 23:22:15.299608    4163 ssh_runner.go:195] Run: which crictl
I0302 23:22:15.301756    4163 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0302 23:22:15.332484    4163 start.go:556] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  24.0.7
RuntimeApiVersion:  v1
I0302 23:22:15.332517    4163 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0302 23:22:15.348242    4163 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0302 23:22:15.372317    4163 out.go:204] 🐳  Preparing Kubernetes v1.28.3 on Docker 24.0.7 ...
I0302 23:22:15.372474    4163 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0302 23:22:15.382801    4163 ssh_runner.go:195] Run: grep 192.168.49.1	host.minikube.internal$ /etc/hosts
I0302 23:22:15.385386    4163 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.49.1	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0302 23:22:15.392761    4163 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" minikube
I0302 23:22:15.402587    4163 preload.go:132] Checking if preload exists for k8s version v1.28.3 and runtime docker
I0302 23:22:15.402616    4163 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0302 23:22:15.415119    4163 docker.go:671] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.28.3
registry.k8s.io/kube-scheduler:v1.28.3
registry.k8s.io/kube-controller-manager:v1.28.3
registry.k8s.io/kube-proxy:v1.28.3
registry.k8s.io/etcd:3.5.9-0
registry.k8s.io/coredns/coredns:v1.10.1
registry.k8s.io/pause:3.9
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0302 23:22:15.415128    4163 docker.go:601] Images already preloaded, skipping extraction
I0302 23:22:15.415163    4163 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0302 23:22:15.426886    4163 docker.go:671] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.28.3
registry.k8s.io/kube-controller-manager:v1.28.3
registry.k8s.io/kube-scheduler:v1.28.3
registry.k8s.io/kube-proxy:v1.28.3
registry.k8s.io/etcd:3.5.9-0
registry.k8s.io/coredns/coredns:v1.10.1
registry.k8s.io/pause:3.9
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0302 23:22:15.426895    4163 cache_images.go:84] Images are preloaded, skipping loading
I0302 23:22:15.426925    4163 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I0302 23:22:15.458552    4163 cni.go:84] Creating CNI manager for ""
I0302 23:22:15.458560    4163 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0302 23:22:15.459420    4163 kubeadm.go:87] Using pod CIDR: 10.244.0.0/16
I0302 23:22:15.459441    4163 kubeadm.go:176] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.28.3 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube NodeName:minikube DNSDomain:cluster.local CRISocket:/var/run/cri-dockerd.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NodeIP:192.168.49.2 CgroupDriver:cgroupfs ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[] ResolvConfSearchRegression:false KubeletConfigOpts:map[hairpinMode:hairpin-veth runtimeRequestTimeout:15m] PrependCriSocketUnix:true}
I0302 23:22:15.459523    4163 kubeadm.go:181] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: unix:///var/run/cri-dockerd.sock
  name: "minikube"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.28.3
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: cgroupfs
hairpinMode: hairpin-veth
runtimeRequestTimeout: 15m
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%!"(MISSING)
  nodefs.inodesFree: "0%!"(MISSING)
  imagefs.available: "0%!"(MISSING)
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0302 23:22:15.459565    4163 kubeadm.go:976] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.28.3/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime-endpoint=unix:///var/run/cri-dockerd.sock --hostname-override=minikube --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.28.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:}
I0302 23:22:15.459594    4163 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.28.3
I0302 23:22:15.465213    4163 binaries.go:44] Found k8s binaries, skipping transfer
I0302 23:22:15.465256    4163 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0302 23:22:15.470780    4163 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (369 bytes)
I0302 23:22:15.481726    4163 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0302 23:22:15.492461    4163 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2091 bytes)
I0302 23:22:15.503339    4163 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0302 23:22:15.505336    4163 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0302 23:22:15.511818    4163 certs.go:56] Setting up /home/giorgibakradze/.minikube/profiles/minikube for IP: 192.168.49.2
I0302 23:22:15.511837    4163 certs.go:190] acquiring lock for shared ca certs: {Name:mk5ed4b4a872b1a0d1cb6c17b0e3662b2d467761 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0302 23:22:15.512637    4163 certs.go:199] skipping minikubeCA CA generation: /home/giorgibakradze/.minikube/ca.key
I0302 23:22:15.512959    4163 certs.go:199] skipping proxyClientCA CA generation: /home/giorgibakradze/.minikube/proxy-client-ca.key
I0302 23:22:15.513007    4163 certs.go:315] skipping minikube-user signed cert generation: /home/giorgibakradze/.minikube/profiles/minikube/client.key
I0302 23:22:15.513258    4163 certs.go:315] skipping minikube signed cert generation: /home/giorgibakradze/.minikube/profiles/minikube/apiserver.key.dd3b5fb2
I0302 23:22:15.513476    4163 certs.go:315] skipping aggregator signed cert generation: /home/giorgibakradze/.minikube/profiles/minikube/proxy-client.key
I0302 23:22:15.513533    4163 certs.go:437] found cert: /home/giorgibakradze/.minikube/certs/home/giorgibakradze/.minikube/certs/ca-key.pem (1679 bytes)
I0302 23:22:15.513546    4163 certs.go:437] found cert: /home/giorgibakradze/.minikube/certs/home/giorgibakradze/.minikube/certs/ca.pem (1099 bytes)
I0302 23:22:15.513556    4163 certs.go:437] found cert: /home/giorgibakradze/.minikube/certs/home/giorgibakradze/.minikube/certs/cert.pem (1143 bytes)
I0302 23:22:15.513566    4163 certs.go:437] found cert: /home/giorgibakradze/.minikube/certs/home/giorgibakradze/.minikube/certs/key.pem (1679 bytes)
I0302 23:22:15.514516    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/profiles/minikube/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1399 bytes)
I0302 23:22:15.530314    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/profiles/minikube/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1675 bytes)
I0302 23:22:15.545464    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/profiles/minikube/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0302 23:22:15.563942    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/profiles/minikube/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1679 bytes)
I0302 23:22:15.581576    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0302 23:22:15.599730    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1675 bytes)
I0302 23:22:15.615911    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0302 23:22:15.630883    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1675 bytes)
I0302 23:22:15.647629    4163 ssh_runner.go:362] scp /home/giorgibakradze/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0302 23:22:15.664981    4163 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (738 bytes)
I0302 23:22:15.676980    4163 ssh_runner.go:195] Run: openssl version
I0302 23:22:15.680130    4163 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0302 23:22:15.686799    4163 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0302 23:22:15.688982    4163 certs.go:480] hashing: -rw-r--r-- 1 root root 1111 Feb 28 10:02 /usr/share/ca-certificates/minikubeCA.pem
I0302 23:22:15.689019    4163 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0302 23:22:15.693035    4163 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0302 23:22:15.698945    4163 ssh_runner.go:195] Run: ls /var/lib/minikube/certs/etcd
I0302 23:22:15.700986    4163 certs.go:353] certs directory doesn't exist, likely first start: ls /var/lib/minikube/certs/etcd: Process exited with status 2
stdout:

stderr:
ls: cannot access '/var/lib/minikube/certs/etcd': No such file or directory
I0302 23:22:15.701006    4163 kubeadm.go:404] StartCluster: {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.42@sha256:d35ac07dfda971cabee05e0deca8aeac772f885a5348e1a0c0b0a36db20fcfc0 Memory:6300 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.28.3 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.28.3 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[default-storageclass:true storage-provisioner:true] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/giorgibakradze:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 AutoPauseInterval:1m0s GPUs:}
I0302 23:22:15.701070    4163 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0302 23:22:15.713580    4163 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0302 23:22:15.719441    4163 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0302 23:22:15.725680    4163 kubeadm.go:226] ignoring SystemVerification for kubeadm because of docker driver
I0302 23:22:15.725712    4163 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0302 23:22:15.731267    4163 kubeadm.go:152] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0302 23:22:15.731287    4163 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.28.3:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0302 23:22:15.762701    4163 kubeadm.go:322] [init] Using Kubernetes version: v1.28.3
I0302 23:22:15.762738    4163 kubeadm.go:322] [preflight] Running pre-flight checks
I0302 23:22:15.843809    4163 kubeadm.go:322] [preflight] Pulling images required for setting up a Kubernetes cluster
I0302 23:22:15.843904    4163 kubeadm.go:322] [preflight] This might take a minute or two, depending on the speed of your internet connection
I0302 23:22:15.843970    4163 kubeadm.go:322] [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I0302 23:22:16.027241    4163 kubeadm.go:322] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I0302 23:22:16.035190    4163 out.go:204]     ▪ Generating certificates and keys ...
I0302 23:22:16.035561    4163 kubeadm.go:322] [certs] Using existing ca certificate authority
I0302 23:22:16.035616    4163 kubeadm.go:322] [certs] Using existing apiserver certificate and key on disk
I0302 23:22:16.097123    4163 kubeadm.go:322] [certs] Generating "apiserver-kubelet-client" certificate and key
I0302 23:22:16.171660    4163 kubeadm.go:322] [certs] Generating "front-proxy-ca" certificate and key
I0302 23:22:16.261282    4163 kubeadm.go:322] [certs] Generating "front-proxy-client" certificate and key
I0302 23:22:16.334674    4163 kubeadm.go:322] [certs] Generating "etcd/ca" certificate and key
I0302 23:22:16.419856    4163 kubeadm.go:322] [certs] Generating "etcd/server" certificate and key
I0302 23:22:16.419928    4163 kubeadm.go:322] [certs] etcd/server serving cert is signed for DNS names [localhost minikube] and IPs [192.168.49.2 127.0.0.1 ::1]
I0302 23:22:16.541972    4163 kubeadm.go:322] [certs] Generating "etcd/peer" certificate and key
I0302 23:22:16.542068    4163 kubeadm.go:322] [certs] etcd/peer serving cert is signed for DNS names [localhost minikube] and IPs [192.168.49.2 127.0.0.1 ::1]
I0302 23:22:16.633329    4163 kubeadm.go:322] [certs] Generating "etcd/healthcheck-client" certificate and key
I0302 23:22:16.814554    4163 kubeadm.go:322] [certs] Generating "apiserver-etcd-client" certificate and key
I0302 23:22:16.856110    4163 kubeadm.go:322] [certs] Generating "sa" key and public key
I0302 23:22:16.856174    4163 kubeadm.go:322] [kubeconfig] Using kubeconfig folder "/etc/kubernetes"
I0302 23:22:17.082462    4163 kubeadm.go:322] [kubeconfig] Writing "admin.conf" kubeconfig file
I0302 23:22:17.245996    4163 kubeadm.go:322] [kubeconfig] Writing "kubelet.conf" kubeconfig file
I0302 23:22:17.354722    4163 kubeadm.go:322] [kubeconfig] Writing "controller-manager.conf" kubeconfig file
I0302 23:22:17.421729    4163 kubeadm.go:322] [kubeconfig] Writing "scheduler.conf" kubeconfig file
I0302 23:22:17.422204    4163 kubeadm.go:322] [etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
I0302 23:22:17.424011    4163 kubeadm.go:322] [control-plane] Using manifest folder "/etc/kubernetes/manifests"
I0302 23:22:17.432644    4163 out.go:204]     ▪ Booting up control plane ...
I0302 23:22:17.432901    4163 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-apiserver"
I0302 23:22:17.432998    4163 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-controller-manager"
I0302 23:22:17.433087    4163 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-scheduler"
I0302 23:22:17.434435    4163 kubeadm.go:322] [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
I0302 23:22:17.435325    4163 kubeadm.go:322] [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
I0302 23:22:17.435815    4163 kubeadm.go:322] [kubelet-start] Starting the kubelet
I0302 23:22:17.534916    4163 kubeadm.go:322] [wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
I0302 23:22:22.538137    4163 kubeadm.go:322] [apiclient] All control plane components are healthy after 5.002791 seconds
I0302 23:22:22.538206    4163 kubeadm.go:322] [upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
I0302 23:22:22.548222    4163 kubeadm.go:322] [kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
I0302 23:22:23.073321    4163 kubeadm.go:322] [upload-certs] Skipping phase. Please see --upload-certs
I0302 23:22:23.073459    4163 kubeadm.go:322] [mark-control-plane] Marking the node minikube as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
I0302 23:22:23.588558    4163 kubeadm.go:322] [bootstrap-token] Using token: qkhdx3.aupjk6dmli7jmz7d
I0302 23:22:23.590004    4163 out.go:204]     ▪ Configuring RBAC rules ...
I0302 23:22:23.590267    4163 kubeadm.go:322] [bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
I0302 23:22:23.593323    4163 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
I0302 23:22:23.599368    4163 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
I0302 23:22:23.601905    4163 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
I0302 23:22:23.605171    4163 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
I0302 23:22:23.607630    4163 kubeadm.go:322] [bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
I0302 23:22:23.617401    4163 kubeadm.go:322] [kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
I0302 23:22:23.743332    4163 kubeadm.go:322] [addons] Applied essential addon: CoreDNS
I0302 23:22:23.997702    4163 kubeadm.go:322] [addons] Applied essential addon: kube-proxy
I0302 23:22:23.998157    4163 kubeadm.go:322] 
I0302 23:22:23.998206    4163 kubeadm.go:322] Your Kubernetes control-plane has initialized successfully!
I0302 23:22:23.998208    4163 kubeadm.go:322] 
I0302 23:22:23.998253    4163 kubeadm.go:322] To start using your cluster, you need to run the following as a regular user:
I0302 23:22:23.998255    4163 kubeadm.go:322] 
I0302 23:22:23.998269    4163 kubeadm.go:322]   mkdir -p $HOME/.kube
I0302 23:22:23.998303    4163 kubeadm.go:322]   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
I0302 23:22:23.998332    4163 kubeadm.go:322]   sudo chown $(id -u):$(id -g) $HOME/.kube/config
I0302 23:22:23.998333    4163 kubeadm.go:322] 
I0302 23:22:23.998364    4163 kubeadm.go:322] Alternatively, if you are the root user, you can run:
I0302 23:22:23.998366    4163 kubeadm.go:322] 
I0302 23:22:23.998394    4163 kubeadm.go:322]   export KUBECONFIG=/etc/kubernetes/admin.conf
I0302 23:22:23.998396    4163 kubeadm.go:322] 
I0302 23:22:23.998428    4163 kubeadm.go:322] You should now deploy a pod network to the cluster.
I0302 23:22:23.998476    4163 kubeadm.go:322] Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
I0302 23:22:23.998516    4163 kubeadm.go:322]   https://kubernetes.io/docs/concepts/cluster-administration/addons/
I0302 23:22:23.998518    4163 kubeadm.go:322] 
I0302 23:22:23.998566    4163 kubeadm.go:322] You can now join any number of control-plane nodes by copying certificate authorities
I0302 23:22:23.998610    4163 kubeadm.go:322] and service account keys on each node and then running the following as root:
I0302 23:22:23.998612    4163 kubeadm.go:322] 
I0302 23:22:23.998660    4163 kubeadm.go:322]   kubeadm join control-plane.minikube.internal:8443 --token qkhdx3.aupjk6dmli7jmz7d \
I0302 23:22:23.998720    4163 kubeadm.go:322] 	--discovery-token-ca-cert-hash sha256:623b3008ea68d8a3ae59f897b15649e60286f9831cba1a53989ec5fdc03f470e \
I0302 23:22:23.998731    4163 kubeadm.go:322] 	--control-plane 
I0302 23:22:23.998733    4163 kubeadm.go:322] 
I0302 23:22:23.998782    4163 kubeadm.go:322] Then you can join any number of worker nodes by running the following on each as root:
I0302 23:22:23.998785    4163 kubeadm.go:322] 
I0302 23:22:23.998832    4163 kubeadm.go:322] kubeadm join control-plane.minikube.internal:8443 --token qkhdx3.aupjk6dmli7jmz7d \
I0302 23:22:23.998898    4163 kubeadm.go:322] 	--discovery-token-ca-cert-hash sha256:623b3008ea68d8a3ae59f897b15649e60286f9831cba1a53989ec5fdc03f470e 
I0302 23:22:24.000622    4163 kubeadm.go:322] 	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
I0302 23:22:24.000718    4163 kubeadm.go:322] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I0302 23:22:24.000730    4163 cni.go:84] Creating CNI manager for ""
I0302 23:22:24.000738    4163 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0302 23:22:24.002179    4163 out.go:177] 🔗  Configuring bridge CNI (Container Networking Interface) ...
I0302 23:22:24.003561    4163 ssh_runner.go:195] Run: sudo mkdir -p /etc/cni/net.d
I0302 23:22:24.009249    4163 ssh_runner.go:362] scp memory --> /etc/cni/net.d/1-k8s.conflist (457 bytes)
I0302 23:22:24.022228    4163 ssh_runner.go:195] Run: /bin/bash -c "cat /proc/$(pgrep kube-apiserver)/oom_adj"
I0302 23:22:24.022270    4163 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.28.3/kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --serviceaccount=kube-system:default --kubeconfig=/var/lib/minikube/kubeconfig
I0302 23:22:24.022274    4163 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.28.3/kubectl label nodes minikube.k8s.io/version=v1.32.0 minikube.k8s.io/commit=8220a6eb95f0a4d75f7f2d7b14cef975f050512d minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2024_03_02T23_22_24_0700 minikube.k8s.io/primary=true --all --overwrite --kubeconfig=/var/lib/minikube/kubeconfig
I0302 23:22:24.027153    4163 ops.go:34] apiserver oom_adj: -16
I0302 23:22:24.097214    4163 kubeadm.go:1081] duration metric: took 74.982709ms to wait for elevateKubeSystemPrivileges.
I0302 23:22:24.097238    4163 kubeadm.go:406] StartCluster complete in 8.396234726s
I0302 23:22:24.097250    4163 settings.go:142] acquiring lock: {Name:mkd34ea5a9158060f44b186f464777254c330f8d Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0302 23:22:24.097333    4163 settings.go:150] Updating kubeconfig:  /home/giorgibakradze/.kube/config
I0302 23:22:24.098076    4163 lock.go:35] WriteFile acquiring /home/giorgibakradze/.kube/config: {Name:mk71db799ccb1231909cd42f530f2ec188459984 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0302 23:22:24.100615    4163 out.go:177] 
W0302 23:22:24.102038    4163 out.go:239] ❌  Exiting due to GUEST_START: failed to start node: Failed kubeconfig update: writing kubeconfig: Error writing file /home/giorgibakradze/.kube/config: open /home/giorgibakradze/.kube/config: no such file or directory
W0302 23:22:24.102073    4163 out.go:239] 
W0302 23:22:24.102699    4163 out.go:239] [31m╭───────────────────────────────────────────────────────────────────────────────────────────╮[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    😿  If the above advice does not help, please let us know:                             [31m│[0m
[31m│[0m    👉  https://github.com/kubernetes/minikube/issues/new/choose                           [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m│[0m    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    [31m│[0m
[31m│[0m                                                                                           [31m│[0m
[31m╰───────────────────────────────────────────────────────────────────────────────────────────╯[0m
I0302 23:22:24.104620    4163 out.go:177] 

* 
* ==> Docker <==
* Mar 02 19:22:14 minikube dockerd[698]: time="2024-03-02T19:22:14.258048306Z" level=info msg="Daemon shutdown complete"
Mar 02 19:22:14 minikube dockerd[698]: time="2024-03-02T19:22:14.258165954Z" level=info msg="stopping event stream following graceful shutdown" error="context canceled" module=libcontainerd namespace=plugins.moby
Mar 02 19:22:14 minikube systemd[1]: docker.service: Deactivated successfully.
Mar 02 19:22:14 minikube systemd[1]: Stopped Docker Application Container Engine.
Mar 02 19:22:14 minikube systemd[1]: Starting Docker Application Container Engine...
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.361819861Z" level=info msg="Starting up"
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.384386865Z" level=info msg="[graphdriver] using prior storage driver: overlay2"
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.386094821Z" level=info msg="Loading containers: start."
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.430708344Z" level=info msg="Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used to set a preferred IP address"
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.460644595Z" level=info msg="Loading containers: done."
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.472992980Z" level=warning msg="WARNING: No blkio throttle.read_bps_device support"
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.473033364Z" level=warning msg="WARNING: No blkio throttle.write_bps_device support"
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.473038029Z" level=warning msg="WARNING: No blkio throttle.read_iops_device support"
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.473040775Z" level=warning msg="WARNING: No blkio throttle.write_iops_device support"
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.473053184Z" level=info msg="Docker daemon" commit=311b9ff graphdriver=overlay2 version=24.0.7
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.473078728Z" level=info msg="Daemon has completed initialization"
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.481554827Z" level=info msg="API listen on /var/run/docker.sock"
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.481628548Z" level=info msg="API listen on [::]:2376"
Mar 02 19:22:14 minikube systemd[1]: Started Docker Application Container Engine.
Mar 02 19:22:14 minikube systemd[1]: Stopping Docker Application Container Engine...
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.659473117Z" level=info msg="Processing signal 'terminated'"
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.660629156Z" level=info msg="stopping event stream following graceful shutdown" error="<nil>" module=libcontainerd namespace=moby
Mar 02 19:22:14 minikube dockerd[1027]: time="2024-03-02T19:22:14.661030154Z" level=info msg="Daemon shutdown complete"
Mar 02 19:22:14 minikube systemd[1]: docker.service: Deactivated successfully.
Mar 02 19:22:14 minikube systemd[1]: Stopped Docker Application Container Engine.
Mar 02 19:22:14 minikube systemd[1]: Starting Docker Application Container Engine...
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.693699331Z" level=info msg="Starting up"
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.701117154Z" level=info msg="[graphdriver] trying configured driver: overlay2"
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.709590441Z" level=info msg="Loading containers: start."
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.758240879Z" level=info msg="Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used to set a preferred IP address"
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.782469307Z" level=info msg="Loading containers: done."
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.791132964Z" level=warning msg="WARNING: No blkio throttle.read_bps_device support"
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.791175744Z" level=warning msg="WARNING: No blkio throttle.write_bps_device support"
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.791181002Z" level=warning msg="WARNING: No blkio throttle.read_iops_device support"
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.791183760Z" level=warning msg="WARNING: No blkio throttle.write_iops_device support"
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.791196041Z" level=info msg="Docker daemon" commit=311b9ff graphdriver=overlay2 version=24.0.7
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.791220057Z" level=info msg="Daemon has completed initialization"
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.799052802Z" level=info msg="API listen on [::]:2376"
Mar 02 19:22:14 minikube dockerd[1227]: time="2024-03-02T19:22:14.799065305Z" level=info msg="API listen on /var/run/docker.sock"
Mar 02 19:22:14 minikube systemd[1]: Started Docker Application Container Engine.
Mar 02 19:22:15 minikube systemd[1]: Starting CRI Interface for Docker Application Container Engine...
Mar 02 19:22:15 minikube cri-dockerd[1441]: time="2024-03-02T19:22:15Z" level=info msg="Connecting to docker on the Endpoint unix:///var/run/docker.sock"
Mar 02 19:22:15 minikube cri-dockerd[1441]: time="2024-03-02T19:22:15Z" level=info msg="Start docker client with request timeout 0s"
Mar 02 19:22:15 minikube cri-dockerd[1441]: time="2024-03-02T19:22:15Z" level=info msg="Hairpin mode is set to hairpin-veth"
Mar 02 19:22:15 minikube cri-dockerd[1441]: time="2024-03-02T19:22:15Z" level=info msg="Loaded network plugin cni"
Mar 02 19:22:15 minikube cri-dockerd[1441]: time="2024-03-02T19:22:15Z" level=info msg="Docker cri networking managed by network plugin cni"
Mar 02 19:22:15 minikube cri-dockerd[1441]: time="2024-03-02T19:22:15Z" level=info msg="Docker Info: &{ID:efe68486-3d1c-485a-b974-6e77009e1426 Containers:0 ContainersRunning:0 ContainersPaused:0 ContainersStopped:0 Images:8 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:[] Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:[] Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6tables:true Debug:false NFd:25 OomKillDisable:true NGoroutines:35 SystemTime:2024-03-02T19:22:15.29114605Z LoggingDriver:json-file CgroupDriver:cgroupfs CgroupVersion:1 NEventsListener:0 KernelVersion:5.10.102.1-microsoft-standard-WSL2 OperatingSystem:Ubuntu 22.04.3 LTS (containerized) OSVersion:22.04 OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:0xc00026e4d0 NCPU:8 MemTotal:26475536384 GenericResources:[] DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy:control-plane.minikube.internal Name:minikube Labels:[provider=docker] ExperimentalBuild:false ServerVersion:24.0.7 ClusterStore: ClusterAdvertise: Runtimes:map[io.containerd.runc.v2:{Path:runc Args:[] Shim:<nil>} runc:{Path:runc Args:[] Shim:<nil>}] DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:[] Nodes:0 Managers:0 Cluster:<nil> Warnings:[]} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:61f9fd88f79f081d64d6fa3bb1a0dc71ec870523 Expected:61f9fd88f79f081d64d6fa3bb1a0dc71ec870523} RuncCommit:{ID:v1.1.9-0-gccaecfc Expected:v1.1.9-0-gccaecfc} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=builtin] ProductLicense: DefaultAddressPools:[] Warnings:[WARNING: No blkio throttle.read_bps_device support WARNING: No blkio throttle.write_bps_device support WARNING: No blkio throttle.read_iops_device support WARNING: No blkio throttle.write_iops_device support]}"
Mar 02 19:22:15 minikube cri-dockerd[1441]: time="2024-03-02T19:22:15Z" level=info msg="Setting cgroupDriver cgroupfs"
Mar 02 19:22:15 minikube cri-dockerd[1441]: time="2024-03-02T19:22:15Z" level=info msg="Docker cri received runtime config &RuntimeConfig{NetworkConfig:&NetworkConfig{PodCidr:,},}"
Mar 02 19:22:15 minikube cri-dockerd[1441]: time="2024-03-02T19:22:15Z" level=info msg="Starting the GRPC backend for the Docker CRI interface."
Mar 02 19:22:15 minikube cri-dockerd[1441]: time="2024-03-02T19:22:15Z" level=info msg="Start cri-dockerd grpc backend"
Mar 02 19:22:15 minikube systemd[1]: Started CRI Interface for Docker Application Container Engine.
Mar 02 19:22:18 minikube cri-dockerd[1441]: time="2024-03-02T19:22:18Z" level=info msg="Will attempt to re-write config file /var/lib/docker/containers/7adc1bc1456ca394a058e0e3c13a47d667753181b95877e1e77d317d4824c018/resolv.conf as [nameserver 192.168.0.111 options ndots:0]"
Mar 02 19:22:18 minikube cri-dockerd[1441]: time="2024-03-02T19:22:18Z" level=info msg="Will attempt to re-write config file /var/lib/docker/containers/f2d28e33620d22d4d5d9ec759cccebab7b5c27b1ba277f77e9ae258b14de1823/resolv.conf as [nameserver 192.168.0.111 options ndots:0]"
Mar 02 19:22:18 minikube cri-dockerd[1441]: time="2024-03-02T19:22:18Z" level=info msg="Will attempt to re-write config file /var/lib/docker/containers/8d406a9f68618c4752566cebd48a1fbcf9143aa4a341f28933fc451699c3ba29/resolv.conf as [nameserver 192.168.0.111 options ndots:0]"
Mar 02 19:22:18 minikube cri-dockerd[1441]: time="2024-03-02T19:22:18Z" level=info msg="Will attempt to re-write config file /var/lib/docker/containers/b433400aabf9e529605f333354efdec881cc21acd269b8f72547dac1dcc5bfec/resolv.conf as [nameserver 192.168.0.111 options ndots:0]"
Mar 02 19:22:37 minikube cri-dockerd[1441]: time="2024-03-02T19:22:37Z" level=info msg="Will attempt to re-write config file /var/lib/docker/containers/51a19b133aa093148e610aa09f63531dd5460ed7702f65f5fcdd54c289c7b506/resolv.conf as [nameserver 192.168.0.111 options ndots:0]"
Mar 02 19:22:37 minikube cri-dockerd[1441]: time="2024-03-02T19:22:37Z" level=info msg="Will attempt to re-write config file /var/lib/docker/containers/cb01332c67b9658be947d1334ecac63e3dec630c2b86cbad0c6e6224d9a0fb2f/resolv.conf as [nameserver 192.168.0.111 options ndots:0]"
Mar 02 19:22:37 minikube cri-dockerd[1441]: time="2024-03-02T19:22:37Z" level=info msg="Will attempt to re-write config file /var/lib/docker/containers/d51fb1b1587ab455438ad8f33da30c698aaeb0309bf7d8f405ca7380fa14b7a1/resolv.conf as [nameserver 192.168.0.111 options ndots:0]"
Mar 02 19:22:44 minikube cri-dockerd[1441]: time="2024-03-02T19:22:44Z" level=info msg="Docker cri received runtime config &RuntimeConfig{NetworkConfig:&NetworkConfig{PodCidr:10.244.0.0/24,},}"

* 
* ==> container status <==
* CONTAINER           IMAGE               CREATED             STATE               NAME                      ATTEMPT             POD ID              POD
0c8612f4caaad       ead0a4a53df89       3 minutes ago       Running             coredns                   0                   cb01332c67b96       coredns-5dd5756b68-mr5n5
ad72e85ae5059       ead0a4a53df89       3 minutes ago       Running             coredns                   0                   d51fb1b1587ab       coredns-5dd5756b68-kfz9h
1105ba23f9adb       bfc896cf80fba       3 minutes ago       Running             kube-proxy                0                   51a19b133aa09       kube-proxy-w94rl
738d527d3e441       10baa1ca17068       3 minutes ago       Running             kube-controller-manager   0                   7adc1bc1456ca       kube-controller-manager-minikube
00cf62d0dc9b5       6d1b4fd1b182d       3 minutes ago       Running             kube-scheduler            0                   f2d28e33620d2       kube-scheduler-minikube
12afac7f5c488       73deb9a3f7025       3 minutes ago       Running             etcd                      0                   b433400aabf9e       etcd-minikube
e2f54374c3932       5374347291230       3 minutes ago       Running             kube-apiserver            0                   8d406a9f68618       kube-apiserver-minikube

* 
* ==> coredns [0c8612f4caaa] <==
* [INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/ready: Still waiting on: "kubernetes"
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/ready: Still waiting on: "kubernetes"
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[WARNING] plugin/kubernetes: starting server with unsynced Kubernetes API
.:53
[INFO] plugin/reload: Running configuration SHA512 = 591cf328cccc12bc490481273e738df59329c62c0b729d94e8b61db9961c2fa5f046dd37f1cf888b953814040d180f52594972691cd6ff41be96639138a43908
CoreDNS-1.10.1
linux/amd64, go1.20, 055b2c3
[INFO] plugin/ready: Still waiting on: "kubernetes"
[INFO] plugin/ready: Still waiting on: "kubernetes"
[INFO] plugin/ready: Still waiting on: "kubernetes"
[WARNING] plugin/kubernetes: Kubernetes API connection failure: Get "https://10.96.0.1:443/version": dial tcp 10.96.0.1:443: i/o timeout

* 
* ==> coredns [ad72e85ae505] <==
* [INFO] plugin/ready: Still waiting on: "kubernetes"
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/ready: Still waiting on: "kubernetes"
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/ready: Still waiting on: "kubernetes"
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[INFO] plugin/kubernetes: waiting for Kubernetes API before starting server
[WARNING] plugin/kubernetes: starting server with unsynced Kubernetes API
.:53
[INFO] plugin/reload: Running configuration SHA512 = 591cf328cccc12bc490481273e738df59329c62c0b729d94e8b61db9961c2fa5f046dd37f1cf888b953814040d180f52594972691cd6ff41be96639138a43908
CoreDNS-1.10.1
linux/amd64, go1.20, 055b2c3
[INFO] plugin/ready: Still waiting on: "kubernetes"
[INFO] plugin/ready: Still waiting on: "kubernetes"
[INFO] plugin/ready: Still waiting on: "kubernetes"

* 
* ==> describe nodes <==
* Name:               minikube
Roles:              control-plane
Labels:             beta.kubernetes.io/arch=amd64
                    beta.kubernetes.io/os=linux
                    kubernetes.io/arch=amd64
                    kubernetes.io/hostname=minikube
                    kubernetes.io/os=linux
                    minikube.k8s.io/commit=8220a6eb95f0a4d75f7f2d7b14cef975f050512d
                    minikube.k8s.io/name=minikube
                    minikube.k8s.io/primary=true
                    minikube.k8s.io/updated_at=2024_03_02T23_22_24_0700
                    minikube.k8s.io/version=v1.32.0
                    node-role.kubernetes.io/control-plane=
                    node.kubernetes.io/exclude-from-external-load-balancers=
Annotations:        kubeadm.alpha.kubernetes.io/cri-socket: unix:///var/run/cri-dockerd.sock
                    node.alpha.kubernetes.io/ttl: 0
                    volumes.kubernetes.io/controller-managed-attach-detach: true
CreationTimestamp:  Sat, 02 Mar 2024 19:22:21 +0000
Taints:             <none>
Unschedulable:      false
Lease:
  HolderIdentity:  minikube
  AcquireTime:     <unset>
  RenewTime:       Sat, 02 Mar 2024 19:25:48 +0000
Conditions:
  Type             Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message
  ----             ------  -----------------                 ------------------                ------                       -------
  MemoryPressure   False   Sat, 02 Mar 2024 19:22:44 +0000   Sat, 02 Mar 2024 19:22:19 +0000   KubeletHasSufficientMemory   kubelet has sufficient memory available
  DiskPressure     False   Sat, 02 Mar 2024 19:22:44 +0000   Sat, 02 Mar 2024 19:22:19 +0000   KubeletHasNoDiskPressure     kubelet has no disk pressure
  PIDPressure      False   Sat, 02 Mar 2024 19:22:44 +0000   Sat, 02 Mar 2024 19:22:19 +0000   KubeletHasSufficientPID      kubelet has sufficient PID available
  Ready            True    Sat, 02 Mar 2024 19:22:44 +0000   Sat, 02 Mar 2024 19:22:21 +0000   KubeletReady                 kubelet is posting ready status
Addresses:
  InternalIP:  192.168.49.2
  Hostname:    minikube
Capacity:
  cpu:                8
  ephemeral-storage:  1055762868Ki
  hugepages-1Gi:      0
  hugepages-2Mi:      0
  memory:             25855016Ki
  pods:               110
Allocatable:
  cpu:                8
  ephemeral-storage:  1055762868Ki
  hugepages-1Gi:      0
  hugepages-2Mi:      0
  memory:             25855016Ki
  pods:               110
System Info:
  Machine ID:                 42aa3a0ded934abe9e6a322543e13948
  System UUID:                42aa3a0ded934abe9e6a322543e13948
  Boot ID:                    655cfc8a-690f-4af2-839d-69d1ec6c0849
  Kernel Version:             5.10.102.1-microsoft-standard-WSL2
  OS Image:                   Ubuntu 22.04.3 LTS
  Operating System:           linux
  Architecture:               amd64
  Container Runtime Version:  docker://24.0.7
  Kubelet Version:            v1.28.3
  Kube-Proxy Version:         v1.28.3
PodCIDR:                      10.244.0.0/24
PodCIDRs:                     10.244.0.0/24
Non-terminated Pods:          (7 in total)
  Namespace                   Name                                CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age
  ---------                   ----                                ------------  ----------  ---------------  -------------  ---
  kube-system                 coredns-5dd5756b68-kfz9h            100m (1%!)(MISSING)     0 (0%!)(MISSING)      70Mi (0%!)(MISSING)        170Mi (0%!)(MISSING)     3m11s
  kube-system                 coredns-5dd5756b68-mr5n5            100m (1%!)(MISSING)     0 (0%!)(MISSING)      70Mi (0%!)(MISSING)        170Mi (0%!)(MISSING)     3m11s
  kube-system                 etcd-minikube                       100m (1%!)(MISSING)     0 (0%!)(MISSING)      100Mi (0%!)(MISSING)       0 (0%!)(MISSING)         3m25s
  kube-system                 kube-apiserver-minikube             250m (3%!)(MISSING)     0 (0%!)(MISSING)      0 (0%!)(MISSING)           0 (0%!)(MISSING)         3m25s
  kube-system                 kube-controller-manager-minikube    200m (2%!)(MISSING)     0 (0%!)(MISSING)      0 (0%!)(MISSING)           0 (0%!)(MISSING)         3m25s
  kube-system                 kube-proxy-w94rl                    0 (0%!)(MISSING)        0 (0%!)(MISSING)      0 (0%!)(MISSING)           0 (0%!)(MISSING)         3m11s
  kube-system                 kube-scheduler-minikube             100m (1%!)(MISSING)     0 (0%!)(MISSING)      0 (0%!)(MISSING)           0 (0%!)(MISSING)         3m25s
Allocated resources:
  (Total limits may be over 100 percent, i.e., overcommitted.)
  Resource           Requests    Limits
  --------           --------    ------
  cpu                850m (10%!)(MISSING)  0 (0%!)(MISSING)
  memory             240Mi (0%!)(MISSING)  340Mi (1%!)(MISSING)
  ephemeral-storage  0 (0%!)(MISSING)      0 (0%!)(MISSING)
  hugepages-1Gi      0 (0%!)(MISSING)      0 (0%!)(MISSING)
  hugepages-2Mi      0 (0%!)(MISSING)      0 (0%!)(MISSING)
Events:
  Type    Reason                   Age                    From             Message
  ----    ------                   ----                   ----             -------
  Normal  Starting                 3m10s                  kube-proxy       
  Normal  Starting                 3m30s                  kubelet          Starting kubelet.
  Normal  NodeHasSufficientMemory  3m30s (x8 over 3m30s)  kubelet          Node minikube status is now: NodeHasSufficientMemory
  Normal  NodeHasNoDiskPressure    3m30s (x8 over 3m30s)  kubelet          Node minikube status is now: NodeHasNoDiskPressure
  Normal  NodeHasSufficientPID     3m30s (x7 over 3m30s)  kubelet          Node minikube status is now: NodeHasSufficientPID
  Normal  NodeAllocatableEnforced  3m30s                  kubelet          Updated Node Allocatable limit across pods
  Normal  Starting                 3m25s                  kubelet          Starting kubelet.
  Normal  NodeHasSufficientMemory  3m25s                  kubelet          Node minikube status is now: NodeHasSufficientMemory
  Normal  NodeHasNoDiskPressure    3m25s                  kubelet          Node minikube status is now: NodeHasNoDiskPressure
  Normal  NodeHasSufficientPID     3m25s                  kubelet          Node minikube status is now: NodeHasSufficientPID
  Normal  NodeAllocatableEnforced  3m25s                  kubelet          Updated Node Allocatable limit across pods
  Normal  RegisteredNode           3m12s                  node-controller  Node minikube event: Registered Node minikube in Controller

* 
* ==> dmesg <==
* [Mar 2 19:06] PCI: Fatal: No config space access function found
[  +0.029519] PCI: System does not support PCI
[  +0.466442] kvm: no hardware support
[  +0.000002] kvm: no hardware support
[  +0.243196] hv_utils: cannot register PTP clock: 0
[  +2.785169] FS-Cache: Duplicate cookie detected
[  +0.000003] FS-Cache: O-cookie c=00000000231bdbca [p=000000002ab0f40f fl=222 nc=0 na=1]
[  +0.000000] FS-Cache: O-cookie d=00000000c034cedd n=0000000026134a3b
[  +0.000001] FS-Cache: O-key=[10] '34323934393337363631'
[  +0.000004] FS-Cache: N-cookie c=0000000074a408f0 [p=000000002ab0f40f fl=2 nc=0 na=1]
[  +0.000000] FS-Cache: N-cookie d=00000000c034cedd n=00000000acc4d916
[  +0.000001] FS-Cache: N-key=[10] '34323934393337363631'
[Mar 2 19:07] WSL2: Performing memory compaction.
[Mar 2 19:10] TCP: eth0: Driver has suspect GRO implementation, TCP performance may be compromised.
[ +35.138354] WSL2: Performing memory compaction.
[Mar 2 19:11] WSL2: Performing memory compaction.
[Mar 2 19:12] WSL2: Performing memory compaction.
[Mar 2 19:14] WSL2: Performing memory compaction.
[Mar 2 19:15] WSL2: Performing memory compaction.
[Mar 2 19:16] cgroup: runc (3374) created nested cgroup for controller "memory" which has incomplete hierarchy support. Nested cgroups may change behavior in the future.
[  +0.000003] cgroup: "memory" requires setting use_hierarchy to 1 on the root
[ +39.052224] WSL2: Performing memory compaction.
[Mar 2 19:17] WSL2: Performing memory compaction.
[Mar 2 19:18] WSL2: Performing memory compaction.
[Mar 2 19:20] WSL2: Performing memory compaction.
[Mar 2 19:21] WSL2: Performing memory compaction.
[Mar 2 19:22] WSL2: Performing memory compaction.
[Mar 2 19:23] WSL2: Performing memory compaction.
[Mar 2 19:24] WSL2: Performing memory compaction.

* 
* ==> etcd [12afac7f5c48] <==
* {"level":"warn","ts":"2024-03-02T19:22:19.054061Z","caller":"embed/config.go:673","msg":"Running http and grpc server on single port. This is not recommended for production."}
{"level":"info","ts":"2024-03-02T19:22:19.054201Z","caller":"etcdmain/etcd.go:73","msg":"Running: ","args":["etcd","--advertise-client-urls=https://192.168.49.2:2379","--cert-file=/var/lib/minikube/certs/etcd/server.crt","--client-cert-auth=true","--data-dir=/var/lib/minikube/etcd","--experimental-initial-corrupt-check=true","--experimental-watch-progress-notify-interval=5s","--initial-advertise-peer-urls=https://192.168.49.2:2380","--initial-cluster=minikube=https://192.168.49.2:2380","--key-file=/var/lib/minikube/certs/etcd/server.key","--listen-client-urls=https://127.0.0.1:2379,https://192.168.49.2:2379","--listen-metrics-urls=http://127.0.0.1:2381","--listen-peer-urls=https://192.168.49.2:2380","--name=minikube","--peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt","--peer-client-cert-auth=true","--peer-key-file=/var/lib/minikube/certs/etcd/peer.key","--peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt","--proxy-refresh-interval=70000","--snapshot-count=10000","--trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt"]}
{"level":"warn","ts":"2024-03-02T19:22:19.054269Z","caller":"embed/config.go:673","msg":"Running http and grpc server on single port. This is not recommended for production."}
{"level":"info","ts":"2024-03-02T19:22:19.054306Z","caller":"embed/etcd.go:127","msg":"configuring peer listeners","listen-peer-urls":["https://192.168.49.2:2380"]}
{"level":"info","ts":"2024-03-02T19:22:19.054356Z","caller":"embed/etcd.go:495","msg":"starting with peer TLS","tls-info":"cert = /var/lib/minikube/certs/etcd/peer.crt, key = /var/lib/minikube/certs/etcd/peer.key, client-cert=, client-key=, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = ","cipher-suites":[]}
{"level":"info","ts":"2024-03-02T19:22:19.054702Z","caller":"embed/etcd.go:135","msg":"configuring client listeners","listen-client-urls":["https://127.0.0.1:2379","https://192.168.49.2:2379"]}
{"level":"info","ts":"2024-03-02T19:22:19.054851Z","caller":"embed/etcd.go:309","msg":"starting an etcd server","etcd-version":"3.5.9","git-sha":"bdbbde998","go-version":"go1.19.9","go-os":"linux","go-arch":"amd64","max-cpu-set":8,"max-cpu-available":8,"member-initialized":false,"name":"minikube","data-dir":"/var/lib/minikube/etcd","wal-dir":"","wal-dir-dedicated":"","member-dir":"/var/lib/minikube/etcd/member","force-new-cluster":false,"heartbeat-interval":"100ms","election-timeout":"1s","initial-election-tick-advance":true,"snapshot-count":10000,"max-wals":5,"max-snapshots":5,"snapshot-catchup-entries":5000,"initial-advertise-peer-urls":["https://192.168.49.2:2380"],"listen-peer-urls":["https://192.168.49.2:2380"],"advertise-client-urls":["https://192.168.49.2:2379"],"listen-client-urls":["https://127.0.0.1:2379","https://192.168.49.2:2379"],"listen-metrics-urls":["http://127.0.0.1:2381"],"cors":["*"],"host-whitelist":["*"],"initial-cluster":"minikube=https://192.168.49.2:2380","initial-cluster-state":"new","initial-cluster-token":"etcd-cluster","quota-backend-bytes":2147483648,"max-request-bytes":1572864,"max-concurrent-streams":4294967295,"pre-vote":true,"initial-corrupt-check":true,"corrupt-check-time-interval":"0s","compact-check-time-enabled":false,"compact-check-time-interval":"1m0s","auto-compaction-mode":"periodic","auto-compaction-retention":"0s","auto-compaction-interval":"0s","discovery-url":"","discovery-proxy":"","downgrade-check-interval":"5s"}
{"level":"info","ts":"2024-03-02T19:22:19.057969Z","caller":"etcdserver/backend.go:81","msg":"opened backend db","path":"/var/lib/minikube/etcd/member/snap/db","took":"2.814364ms"}
{"level":"info","ts":"2024-03-02T19:22:19.064493Z","caller":"etcdserver/raft.go:495","msg":"starting local member","local-member-id":"aec36adc501070cc","cluster-id":"fa54960ea34d58be"}
{"level":"info","ts":"2024-03-02T19:22:19.064572Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc switched to configuration voters=()"}
{"level":"info","ts":"2024-03-02T19:22:19.0646Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc became follower at term 0"}
{"level":"info","ts":"2024-03-02T19:22:19.064612Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"newRaft aec36adc501070cc [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]"}
{"level":"info","ts":"2024-03-02T19:22:19.064618Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc became follower at term 1"}
{"level":"info","ts":"2024-03-02T19:22:19.064643Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc switched to configuration voters=(12593026477526642892)"}
{"level":"warn","ts":"2024-03-02T19:22:19.069188Z","caller":"auth/store.go:1238","msg":"simple token is not cryptographically signed"}
{"level":"info","ts":"2024-03-02T19:22:19.071879Z","caller":"mvcc/kvstore.go:393","msg":"kvstore restored","current-rev":1}
{"level":"info","ts":"2024-03-02T19:22:19.073391Z","caller":"etcdserver/quota.go:94","msg":"enabled backend quota with default value","quota-name":"v3-applier","quota-size-bytes":2147483648,"quota-size":"2.1 GB"}
{"level":"info","ts":"2024-03-02T19:22:19.075015Z","caller":"etcdserver/server.go:854","msg":"starting etcd server","local-member-id":"aec36adc501070cc","local-server-version":"3.5.9","cluster-version":"to_be_decided"}
{"level":"info","ts":"2024-03-02T19:22:19.075163Z","caller":"etcdserver/server.go:738","msg":"started as single-node; fast-forwarding election ticks","local-member-id":"aec36adc501070cc","forward-ticks":9,"forward-duration":"900ms","election-ticks":10,"election-timeout":"1s"}
{"level":"info","ts":"2024-03-02T19:22:19.075155Z","caller":"fileutil/purge.go:44","msg":"started to purge file","dir":"/var/lib/minikube/etcd/member/snap","suffix":"snap.db","max":5,"interval":"30s"}
{"level":"info","ts":"2024-03-02T19:22:19.075201Z","caller":"fileutil/purge.go:44","msg":"started to purge file","dir":"/var/lib/minikube/etcd/member/snap","suffix":"snap","max":5,"interval":"30s"}
{"level":"info","ts":"2024-03-02T19:22:19.075215Z","caller":"fileutil/purge.go:44","msg":"started to purge file","dir":"/var/lib/minikube/etcd/member/wal","suffix":"wal","max":5,"interval":"30s"}
{"level":"info","ts":"2024-03-02T19:22:19.076272Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc switched to configuration voters=(12593026477526642892)"}
{"level":"info","ts":"2024-03-02T19:22:19.076371Z","caller":"membership/cluster.go:421","msg":"added member","cluster-id":"fa54960ea34d58be","local-member-id":"aec36adc501070cc","added-peer-id":"aec36adc501070cc","added-peer-peer-urls":["https://192.168.49.2:2380"]}
{"level":"info","ts":"2024-03-02T19:22:19.076659Z","caller":"embed/etcd.go:726","msg":"starting with client TLS","tls-info":"cert = /var/lib/minikube/certs/etcd/server.crt, key = /var/lib/minikube/certs/etcd/server.key, client-cert=, client-key=, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = ","cipher-suites":[]}
{"level":"info","ts":"2024-03-02T19:22:19.076853Z","caller":"embed/etcd.go:278","msg":"now serving peer/client/metrics","local-member-id":"aec36adc501070cc","initial-advertise-peer-urls":["https://192.168.49.2:2380"],"listen-peer-urls":["https://192.168.49.2:2380"],"advertise-client-urls":["https://192.168.49.2:2379"],"listen-client-urls":["https://127.0.0.1:2379","https://192.168.49.2:2379"],"listen-metrics-urls":["http://127.0.0.1:2381"]}
{"level":"info","ts":"2024-03-02T19:22:19.076883Z","caller":"embed/etcd.go:855","msg":"serving metrics","address":"http://127.0.0.1:2381"}
{"level":"info","ts":"2024-03-02T19:22:19.076944Z","caller":"embed/etcd.go:597","msg":"serving peer traffic","address":"192.168.49.2:2380"}
{"level":"info","ts":"2024-03-02T19:22:19.076952Z","caller":"embed/etcd.go:569","msg":"cmux::serve","address":"192.168.49.2:2380"}
{"level":"info","ts":"2024-03-02T19:22:19.365589Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc is starting a new election at term 1"}
{"level":"info","ts":"2024-03-02T19:22:19.36566Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc became pre-candidate at term 1"}
{"level":"info","ts":"2024-03-02T19:22:19.365692Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc received MsgPreVoteResp from aec36adc501070cc at term 1"}
{"level":"info","ts":"2024-03-02T19:22:19.365749Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc became candidate at term 2"}
{"level":"info","ts":"2024-03-02T19:22:19.365764Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc received MsgVoteResp from aec36adc501070cc at term 2"}
{"level":"info","ts":"2024-03-02T19:22:19.365836Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc became leader at term 2"}
{"level":"info","ts":"2024-03-02T19:22:19.365855Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"raft.node: aec36adc501070cc elected leader aec36adc501070cc at term 2"}
{"level":"info","ts":"2024-03-02T19:22:19.368428Z","caller":"etcdserver/server.go:2571","msg":"setting up initial cluster version using v2 API","cluster-version":"3.5"}
{"level":"info","ts":"2024-03-02T19:22:19.372566Z","caller":"etcdserver/server.go:2062","msg":"published local member to cluster through raft","local-member-id":"aec36adc501070cc","local-member-attributes":"{Name:minikube ClientURLs:[https://192.168.49.2:2379]}","request-path":"/0/members/aec36adc501070cc/attributes","cluster-id":"fa54960ea34d58be","publish-timeout":"7s"}
{"level":"info","ts":"2024-03-02T19:22:19.372626Z","caller":"embed/serve.go:103","msg":"ready to serve client requests"}
{"level":"info","ts":"2024-03-02T19:22:19.372841Z","caller":"embed/serve.go:103","msg":"ready to serve client requests"}
{"level":"info","ts":"2024-03-02T19:22:19.374989Z","caller":"embed/serve.go:250","msg":"serving client traffic securely","traffic":"grpc+http","address":"192.168.49.2:2379"}
{"level":"info","ts":"2024-03-02T19:22:19.375053Z","caller":"embed/serve.go:250","msg":"serving client traffic securely","traffic":"grpc+http","address":"127.0.0.1:2379"}
{"level":"info","ts":"2024-03-02T19:22:19.375596Z","caller":"etcdmain/main.go:44","msg":"notifying init daemon"}
{"level":"info","ts":"2024-03-02T19:22:19.375625Z","caller":"etcdmain/main.go:50","msg":"successfully notified init daemon"}
{"level":"info","ts":"2024-03-02T19:22:19.450738Z","caller":"membership/cluster.go:584","msg":"set initial cluster version","cluster-id":"fa54960ea34d58be","local-member-id":"aec36adc501070cc","cluster-version":"3.5"}
{"level":"info","ts":"2024-03-02T19:22:19.450901Z","caller":"api/capability.go:75","msg":"enabled capabilities for version","cluster-version":"3.5"}
{"level":"info","ts":"2024-03-02T19:22:19.450955Z","caller":"etcdserver/server.go:2595","msg":"cluster version is updated","cluster-version":"3.5"}

* 
* ==> kernel <==
*  19:25:48 up 19 min,  0 users,  load average: 0.27, 0.28, 0.12
Linux minikube 5.10.102.1-microsoft-standard-WSL2 #1 SMP Wed Mar 2 00:30:59 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
PRETTY_NAME="Ubuntu 22.04.3 LTS"

* 
* ==> kube-apiserver [e2f54374c393] <==
* I0302 19:22:20.995119       1 apf_controller.go:372] Starting API Priority and Fairness config controller
I0302 19:22:20.995148       1 dynamic_serving_content.go:132] "Starting controller" name="aggregator-proxy-cert::/var/lib/minikube/certs/front-proxy-client.crt::/var/lib/minikube/certs/front-proxy-client.key"
I0302 19:22:20.995164       1 aggregator.go:164] waiting for initial CRD sync...
I0302 19:22:20.995171       1 cluster_authentication_trust_controller.go:440] Starting cluster_authentication_trust_controller controller
I0302 19:22:20.995179       1 shared_informer.go:311] Waiting for caches to sync for cluster_authentication_trust_controller
I0302 19:22:20.995195       1 tlsconfig.go:240] "Starting DynamicServingCertificateController"
I0302 19:22:20.995208       1 crdregistration_controller.go:111] Starting crd-autoregister controller
I0302 19:22:20.995212       1 shared_informer.go:311] Waiting for caches to sync for crd-autoregister
I0302 19:22:20.995238       1 available_controller.go:423] Starting AvailableConditionController
I0302 19:22:20.995248       1 cache.go:32] Waiting for caches to sync for AvailableConditionController controller
I0302 19:22:20.995254       1 gc_controller.go:78] Starting apiserver lease garbage collector
I0302 19:22:20.995264       1 handler_discovery.go:412] Starting ResourceDiscoveryManager
I0302 19:22:20.995309       1 controller.go:78] Starting OpenAPI AggregationController
I0302 19:22:20.995316       1 apiservice_controller.go:97] Starting APIServiceRegistrationController
I0302 19:22:20.995321       1 cache.go:32] Waiting for caches to sync for APIServiceRegistrationController controller
I0302 19:22:20.995379       1 gc_controller.go:78] Starting apiserver lease garbage collector
I0302 19:22:20.995407       1 controller.go:80] Starting OpenAPI V3 AggregationController
I0302 19:22:20.995476       1 system_namespaces_controller.go:67] Starting system namespaces controller
I0302 19:22:20.995544       1 customresource_discovery_controller.go:289] Starting DiscoveryController
I0302 19:22:20.995569       1 controller.go:134] Starting OpenAPI controller
I0302 19:22:20.995589       1 naming_controller.go:291] Starting NamingConditionController
I0302 19:22:20.995596       1 controller.go:116] Starting legacy_token_tracking_controller
I0302 19:22:20.995601       1 shared_informer.go:311] Waiting for caches to sync for configmaps
I0302 19:22:20.995607       1 controller.go:85] Starting OpenAPI V3 controller
I0302 19:22:20.995611       1 establishing_controller.go:76] Starting EstablishingController
I0302 19:22:20.995621       1 nonstructuralschema_controller.go:192] Starting NonStructuralSchemaConditionController
I0302 19:22:20.995630       1 apiapproval_controller.go:186] Starting KubernetesAPIApprovalPolicyConformantConditionController
I0302 19:22:20.995641       1 crd_finalizer.go:266] Starting CRDFinalizer
I0302 19:22:20.996300       1 dynamic_cafile_content.go:157] "Starting controller" name="client-ca-bundle::/var/lib/minikube/certs/ca.crt"
I0302 19:22:20.997914       1 dynamic_cafile_content.go:157] "Starting controller" name="request-header::/var/lib/minikube/certs/front-proxy-ca.crt"
I0302 19:22:21.096724       1 shared_informer.go:318] Caches are synced for configmaps
I0302 19:22:21.150340       1 shared_informer.go:318] Caches are synced for cluster_authentication_trust_controller
I0302 19:22:21.150467       1 shared_informer.go:318] Caches are synced for crd-autoregister
I0302 19:22:21.150385       1 shared_informer.go:318] Caches are synced for node_authorizer
I0302 19:22:21.150447       1 cache.go:39] Caches are synced for AvailableConditionController controller
I0302 19:22:21.153054       1 aggregator.go:166] initial CRD sync complete...
I0302 19:22:21.153069       1 autoregister_controller.go:141] Starting autoregister controller
I0302 19:22:21.153085       1 cache.go:32] Waiting for caches to sync for autoregister controller
I0302 19:22:21.153103       1 cache.go:39] Caches are synced for autoregister controller
I0302 19:22:21.150939       1 cache.go:39] Caches are synced for APIServiceRegistrationController controller
I0302 19:22:21.150966       1 apf_controller.go:377] Running API Priority and Fairness config worker
I0302 19:22:21.152426       1 controller.go:624] quota admission added evaluator for: namespaces
I0302 19:22:21.154347       1 apf_controller.go:380] Running API Priority and Fairness periodic rebalancing process
E0302 19:22:21.162338       1 controller.go:145] while syncing ConfigMap "kube-system/kube-apiserver-legacy-service-account-token-tracking", err: namespaces "kube-system" not found
I0302 19:22:21.250794       1 controller.go:624] quota admission added evaluator for: leases.coordination.k8s.io
I0302 19:22:22.006712       1 storage_scheduling.go:95] created PriorityClass system-node-critical with value 2000001000
I0302 19:22:22.010758       1 storage_scheduling.go:95] created PriorityClass system-cluster-critical with value 2000000000
I0302 19:22:22.010782       1 storage_scheduling.go:111] all system priority classes are created successfully or already exist.
I0302 19:22:22.385605       1 controller.go:624] quota admission added evaluator for: roles.rbac.authorization.k8s.io
I0302 19:22:22.416363       1 controller.go:624] quota admission added evaluator for: rolebindings.rbac.authorization.k8s.io
I0302 19:22:22.472159       1 alloc.go:330] "allocated clusterIPs" service="default/kubernetes" clusterIPs={"IPv4":"10.96.0.1"}
W0302 19:22:22.476807       1 lease.go:263] Resetting endpoints for master service "kubernetes" to [192.168.49.2]
I0302 19:22:22.477605       1 controller.go:624] quota admission added evaluator for: endpoints
I0302 19:22:22.483156       1 controller.go:624] quota admission added evaluator for: endpointslices.discovery.k8s.io
I0302 19:22:23.075364       1 controller.go:624] quota admission added evaluator for: serviceaccounts
I0302 19:22:23.733504       1 controller.go:624] quota admission added evaluator for: deployments.apps
I0302 19:22:23.742184       1 alloc.go:330] "allocated clusterIPs" service="kube-system/kube-dns" clusterIPs={"IPv4":"10.96.0.10"}
I0302 19:22:23.750182       1 controller.go:624] quota admission added evaluator for: daemonsets.apps
I0302 19:22:36.323314       1 controller.go:624] quota admission added evaluator for: replicasets.apps
I0302 19:22:37.172477       1 controller.go:624] quota admission added evaluator for: controllerrevisions.apps

* 
* ==> kube-controller-manager [738d527d3e44] <==
* I0302 19:22:36.170593       1 shared_informer.go:318] Caches are synced for cronjob
I0302 19:22:36.170617       1 shared_informer.go:318] Caches are synced for deployment
I0302 19:22:36.170718       1 shared_informer.go:318] Caches are synced for ClusterRoleAggregator
I0302 19:22:36.171120       1 shared_informer.go:318] Caches are synced for endpoint_slice
I0302 19:22:36.171822       1 shared_informer.go:318] Caches are synced for PV protection
I0302 19:22:36.172977       1 shared_informer.go:318] Caches are synced for GC
I0302 19:22:36.176889       1 shared_informer.go:318] Caches are synced for TTL
I0302 19:22:36.177537       1 shared_informer.go:318] Caches are synced for endpoint_slice_mirroring
I0302 19:22:36.183581       1 shared_informer.go:318] Caches are synced for persistent volume
I0302 19:22:36.190771       1 shared_informer.go:318] Caches are synced for endpoint
I0302 19:22:36.197009       1 shared_informer.go:318] Caches are synced for ReplicationController
I0302 19:22:36.202323       1 shared_informer.go:318] Caches are synced for service account
I0302 19:22:36.219021       1 shared_informer.go:318] Caches are synced for disruption
I0302 19:22:36.220162       1 shared_informer.go:318] Caches are synced for certificate-csrsigning-kubelet-serving
I0302 19:22:36.220273       1 shared_informer.go:318] Caches are synced for TTL after finished
I0302 19:22:36.220402       1 shared_informer.go:318] Caches are synced for certificate-csrsigning-kubelet-client
I0302 19:22:36.221574       1 shared_informer.go:318] Caches are synced for certificate-csrsigning-legacy-unknown
I0302 19:22:36.221604       1 shared_informer.go:318] Caches are synced for bootstrap_signer
I0302 19:22:36.221592       1 shared_informer.go:318] Caches are synced for certificate-csrapproving
I0302 19:22:36.221655       1 shared_informer.go:318] Caches are synced for certificate-csrsigning-kube-apiserver-client
I0302 19:22:36.223936       1 shared_informer.go:318] Caches are synced for daemon sets
I0302 19:22:36.223956       1 shared_informer.go:318] Caches are synced for namespace
I0302 19:22:36.224007       1 shared_informer.go:318] Caches are synced for crt configmap
I0302 19:22:36.224997       1 shared_informer.go:318] Caches are synced for node
I0302 19:22:36.225042       1 range_allocator.go:174] "Sending events to api server"
I0302 19:22:36.225054       1 range_allocator.go:178] "Starting range CIDR allocator"
I0302 19:22:36.225069       1 shared_informer.go:311] Waiting for caches to sync for cidrallocator
I0302 19:22:36.225073       1 shared_informer.go:318] Caches are synced for cidrallocator
I0302 19:22:36.226888       1 shared_informer.go:318] Caches are synced for taint
I0302 19:22:36.226953       1 node_lifecycle_controller.go:1225] "Initializing eviction metric for zone" zone=""
I0302 19:22:36.226983       1 taint_manager.go:206] "Starting NoExecuteTaintManager"
I0302 19:22:36.227047       1 node_lifecycle_controller.go:877] "Missing timestamp for Node. Assuming now as a timestamp" node="minikube"
I0302 19:22:36.227082       1 event.go:307] "Event occurred" object="minikube" fieldPath="" kind="Node" apiVersion="v1" type="Normal" reason="RegisteredNode" message="Node minikube event: Registered Node minikube in Controller"
I0302 19:22:36.227057       1 taint_manager.go:211] "Sending events to api server"
I0302 19:22:36.227103       1 node_lifecycle_controller.go:1071] "Controller detected that zone is now in new state" zone="" newState="Normal"
I0302 19:22:36.230328       1 range_allocator.go:380] "Set node PodCIDR" node="minikube" podCIDRs=["10.244.0.0/24"]
I0302 19:22:36.231839       1 shared_informer.go:318] Caches are synced for PVC protection
I0302 19:22:36.239028       1 shared_informer.go:318] Caches are synced for ephemeral
I0302 19:22:36.244315       1 shared_informer.go:318] Caches are synced for attach detach
I0302 19:22:36.270518       1 shared_informer.go:318] Caches are synced for stateful set
I0302 19:22:36.271711       1 shared_informer.go:318] Caches are synced for expand
I0302 19:22:36.326084       1 shared_informer.go:318] Caches are synced for resource quota
I0302 19:22:36.326360       1 event.go:307] "Event occurred" object="kube-system/coredns" fieldPath="" kind="Deployment" apiVersion="apps/v1" type="Normal" reason="ScalingReplicaSet" message="Scaled up replica set coredns-5dd5756b68 to 2"
I0302 19:22:36.374699       1 shared_informer.go:318] Caches are synced for resource quota
I0302 19:22:36.732013       1 shared_informer.go:318] Caches are synced for garbage collector
I0302 19:22:36.810983       1 shared_informer.go:318] Caches are synced for garbage collector
I0302 19:22:36.811030       1 garbagecollector.go:166] "All resource monitors have synced. Proceeding to collect garbage"
I0302 19:22:37.189020       1 event.go:307] "Event occurred" object="kube-system/kube-proxy" fieldPath="" kind="DaemonSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: kube-proxy-w94rl"
I0302 19:22:37.225632       1 event.go:307] "Event occurred" object="kube-system/coredns-5dd5756b68" fieldPath="" kind="ReplicaSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: coredns-5dd5756b68-mr5n5"
I0302 19:22:37.230047       1 event.go:307] "Event occurred" object="kube-system/coredns-5dd5756b68" fieldPath="" kind="ReplicaSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: coredns-5dd5756b68-kfz9h"
I0302 19:22:37.236881       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="910.572573ms"
I0302 19:22:37.250651       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="13.722151ms"
I0302 19:22:37.250709       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="32.24µs"
I0302 19:22:37.257818       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="69.937µs"
I0302 19:22:38.162811       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="141.02µs"
I0302 19:22:39.100864       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="72.143µs"
I0302 19:23:17.587928       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="6.284417ms"
I0302 19:23:17.587997       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="42.785µs"
I0302 19:23:17.595792       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="5.422156ms"
I0302 19:23:17.595856       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="36.339µs"

* 
* ==> kube-proxy [1105ba23f9ad] <==
* I0302 19:22:38.164700       1 server_others.go:69] "Using iptables proxy"
I0302 19:22:38.187193       1 node.go:141] Successfully retrieved node IP: 192.168.49.2
I0302 19:22:38.205858       1 server.go:632] "kube-proxy running in dual-stack mode" primary ipFamily="IPv4"
I0302 19:22:38.207006       1 server_others.go:152] "Using iptables Proxier"
I0302 19:22:38.207033       1 server_others.go:421] "Detect-local-mode set to ClusterCIDR, but no cluster CIDR for family" ipFamily="IPv6"
I0302 19:22:38.207037       1 server_others.go:438] "Defaulting to no-op detect-local"
I0302 19:22:38.207049       1 proxier.go:251] "Setting route_localnet=1 to allow node-ports on localhost; to change this either disable iptables.localhostNodePorts (--iptables-localhost-nodeports) or set nodePortAddresses (--nodeport-addresses) to filter loopback addresses"
I0302 19:22:38.207232       1 server.go:846] "Version info" version="v1.28.3"
I0302 19:22:38.207251       1 server.go:848] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0302 19:22:38.207760       1 config.go:97] "Starting endpoint slice config controller"
I0302 19:22:38.207809       1 shared_informer.go:311] Waiting for caches to sync for endpoint slice config
I0302 19:22:38.207760       1 config.go:188] "Starting service config controller"
I0302 19:22:38.207889       1 shared_informer.go:311] Waiting for caches to sync for service config
I0302 19:22:38.207775       1 config.go:315] "Starting node config controller"
I0302 19:22:38.207921       1 shared_informer.go:311] Waiting for caches to sync for node config
I0302 19:22:38.308924       1 shared_informer.go:318] Caches are synced for service config
I0302 19:22:38.308952       1 shared_informer.go:318] Caches are synced for endpoint slice config
I0302 19:22:38.309767       1 shared_informer.go:318] Caches are synced for node config

* 
* ==> kube-scheduler [00cf62d0dc9b] <==
* W0302 19:22:21.069179       1 authentication.go:368] Error looking up in-cluster authentication configuration: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot get resource "configmaps" in API group "" in the namespace "kube-system"
W0302 19:22:21.069203       1 authentication.go:369] Continuing without authentication configuration. This may treat all requests as anonymous.
W0302 19:22:21.069219       1 authentication.go:370] To require authentication configuration lookup to succeed, set --authentication-tolerate-lookup-failure=false
I0302 19:22:21.155223       1 server.go:154] "Starting Kubernetes Scheduler" version="v1.28.3"
I0302 19:22:21.155316       1 server.go:156] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0302 19:22:21.158057       1 configmap_cafile_content.go:202] "Starting controller" name="client-ca::kube-system::extension-apiserver-authentication::client-ca-file"
I0302 19:22:21.158176       1 shared_informer.go:311] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I0302 19:22:21.159614       1 secure_serving.go:213] Serving securely on 127.0.0.1:10259
I0302 19:22:21.159765       1 tlsconfig.go:240] "Starting DynamicServingCertificateController"
W0302 19:22:21.163119       1 reflector.go:535] pkg/server/dynamiccertificates/configmap_cafile_content.go:206: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
E0302 19:22:21.163166       1 reflector.go:147] pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to watch *v1.ConfigMap: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
W0302 19:22:21.163180       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
E0302 19:22:21.163215       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.ReplicaSet: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
W0302 19:22:21.163365       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E0302 19:22:21.163383       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
W0302 19:22:21.163430       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0302 19:22:21.163458       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
W0302 19:22:21.164076       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0302 19:22:21.164135       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
W0302 19:22:21.164569       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0302 19:22:21.164720       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.PodDisruptionBudget: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
W0302 19:22:21.164742       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
W0302 19:22:21.164995       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Namespace: namespaces is forbidden: User "system:kube-scheduler" cannot list resource "namespaces" in API group "" at the cluster scope
E0302 19:22:21.165540       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Namespace: failed to list *v1.Namespace: namespaces is forbidden: User "system:kube-scheduler" cannot list resource "namespaces" in API group "" at the cluster scope
W0302 19:22:21.165623       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.CSIDriver: csidrivers.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csidrivers" in API group "storage.k8s.io" at the cluster scope
W0302 19:22:21.164637       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
E0302 19:22:21.165665       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.CSIDriver: failed to list *v1.CSIDriver: csidrivers.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csidrivers" in API group "storage.k8s.io" at the cluster scope
E0302 19:22:21.165713       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.CSIStorageCapacity: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
W0302 19:22:21.164643       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0302 19:22:21.165770       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Node: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
W0302 19:22:21.164610       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0302 19:22:21.165829       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
W0302 19:22:21.164760       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
E0302 19:22:21.165909       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.CSINode: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
W0302 19:22:21.164769       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0302 19:22:21.165962       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
W0302 19:22:21.164865       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0302 19:22:21.166009       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0302 19:22:21.165053       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
W0302 19:22:22.013363       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
E0302 19:22:22.013396       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.CSIStorageCapacity: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
W0302 19:22:22.026674       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0302 19:22:22.026715       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Node: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
W0302 19:22:22.036809       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0302 19:22:22.036846       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
W0302 19:22:22.040838       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0302 19:22:22.040873       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
W0302 19:22:22.072428       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0302 19:22:22.072460       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
W0302 19:22:22.090618       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0302 19:22:22.090651       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.PodDisruptionBudget: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
W0302 19:22:22.107704       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0302 19:22:22.107736       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
W0302 19:22:22.123733       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E0302 19:22:22.123770       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
W0302 19:22:22.251725       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0302 19:22:22.251764       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
W0302 19:22:22.310276       1 reflector.go:535] pkg/server/dynamiccertificates/configmap_cafile_content.go:206: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
E0302 19:22:22.310311       1 reflector.go:147] pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to watch *v1.ConfigMap: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
I0302 19:22:24.359041       1 shared_informer.go:318] Caches are synced for client-ca::kube-system::extension-apiserver-authentication::client-ca-file

* 
* ==> kubelet <==
* Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.886292    2567 cpu_manager.go:214] "Starting CPU manager" policy="none"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.886324    2567 cpu_manager.go:215] "Reconciling" reconcilePeriod="10s"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.886340    2567 state_mem.go:36] "Initialized new in-memory state store"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.886476    2567 state_mem.go:88] "Updated default CPUSet" cpuSet=""
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.886505    2567 state_mem.go:96] "Updated CPUSet assignments" assignments={}
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.886510    2567 policy_none.go:49] "None policy: Start"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.888325    2567 kubelet_node_status.go:70] "Attempting to register node" node="minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.889911    2567 memory_manager.go:169] "Starting memorymanager" policy="None"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.889956    2567 state_mem.go:35] "Initializing new in-memory state store"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.890110    2567 state_mem.go:75] "Updated machine memory state"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.891070    2567 manager.go:471] "Failed to read data from checkpoint" checkpoint="kubelet_internal_checkpoint" err="checkpoint is not found"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.891302    2567 container_manager_linux.go:803] "CPUAccounting not enabled for process" pid=2567
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.891330    2567 container_manager_linux.go:806] "MemoryAccounting not enabled for process" pid=2567
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.891587    2567 plugin_manager.go:118] "Starting Kubelet Plugin Manager"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.891703    2567 topology_manager.go:215] "Topology Admit Handler" podUID="9aac5b5c8815def09a2ef9e37b89da55" podNamespace="kube-system" podName="etcd-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.891815    2567 topology_manager.go:215] "Topology Admit Handler" podUID="55b4bbe24dac3803a7379f9ae169d6ba" podNamespace="kube-system" podName="kube-apiserver-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.891877    2567 topology_manager.go:215] "Topology Admit Handler" podUID="7da72fc2e2cfb27aacf6cffd1c72da00" podNamespace="kube-system" podName="kube-controller-manager-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.891908    2567 topology_manager.go:215] "Topology Admit Handler" podUID="75ac196d3709dde303d8a81c035c2c28" podNamespace="kube-system" podName="kube-scheduler-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.960659    2567 kubelet_node_status.go:108] "Node was previously registered" node="minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.960780    2567 kubelet_node_status.go:73] "Successfully registered node" node="minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984192    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"etc-ca-certificates\" (UniqueName: \"kubernetes.io/host-path/7da72fc2e2cfb27aacf6cffd1c72da00-etc-ca-certificates\") pod \"kube-controller-manager-minikube\" (UID: \"7da72fc2e2cfb27aacf6cffd1c72da00\") " pod="kube-system/kube-controller-manager-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984234    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"usr-local-share-ca-certificates\" (UniqueName: \"kubernetes.io/host-path/7da72fc2e2cfb27aacf6cffd1c72da00-usr-local-share-ca-certificates\") pod \"kube-controller-manager-minikube\" (UID: \"7da72fc2e2cfb27aacf6cffd1c72da00\") " pod="kube-system/kube-controller-manager-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984247    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"k8s-certs\" (UniqueName: \"kubernetes.io/host-path/55b4bbe24dac3803a7379f9ae169d6ba-k8s-certs\") pod \"kube-apiserver-minikube\" (UID: \"55b4bbe24dac3803a7379f9ae169d6ba\") " pod="kube-system/kube-apiserver-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984259    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"k8s-certs\" (UniqueName: \"kubernetes.io/host-path/7da72fc2e2cfb27aacf6cffd1c72da00-k8s-certs\") pod \"kube-controller-manager-minikube\" (UID: \"7da72fc2e2cfb27aacf6cffd1c72da00\") " pod="kube-system/kube-controller-manager-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984270    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"usr-share-ca-certificates\" (UniqueName: \"kubernetes.io/host-path/7da72fc2e2cfb27aacf6cffd1c72da00-usr-share-ca-certificates\") pod \"kube-controller-manager-minikube\" (UID: \"7da72fc2e2cfb27aacf6cffd1c72da00\") " pod="kube-system/kube-controller-manager-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984287    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"etcd-data\" (UniqueName: \"kubernetes.io/host-path/9aac5b5c8815def09a2ef9e37b89da55-etcd-data\") pod \"etcd-minikube\" (UID: \"9aac5b5c8815def09a2ef9e37b89da55\") " pod="kube-system/etcd-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984304    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"etc-ca-certificates\" (UniqueName: \"kubernetes.io/host-path/55b4bbe24dac3803a7379f9ae169d6ba-etc-ca-certificates\") pod \"kube-apiserver-minikube\" (UID: \"55b4bbe24dac3803a7379f9ae169d6ba\") " pod="kube-system/kube-apiserver-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984327    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"kubeconfig\" (UniqueName: \"kubernetes.io/host-path/7da72fc2e2cfb27aacf6cffd1c72da00-kubeconfig\") pod \"kube-controller-manager-minikube\" (UID: \"7da72fc2e2cfb27aacf6cffd1c72da00\") " pod="kube-system/kube-controller-manager-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984360    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"ca-certs\" (UniqueName: \"kubernetes.io/host-path/55b4bbe24dac3803a7379f9ae169d6ba-ca-certs\") pod \"kube-apiserver-minikube\" (UID: \"55b4bbe24dac3803a7379f9ae169d6ba\") " pod="kube-system/kube-apiserver-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984384    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"usr-local-share-ca-certificates\" (UniqueName: \"kubernetes.io/host-path/55b4bbe24dac3803a7379f9ae169d6ba-usr-local-share-ca-certificates\") pod \"kube-apiserver-minikube\" (UID: \"55b4bbe24dac3803a7379f9ae169d6ba\") " pod="kube-system/kube-apiserver-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984397    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"usr-share-ca-certificates\" (UniqueName: \"kubernetes.io/host-path/55b4bbe24dac3803a7379f9ae169d6ba-usr-share-ca-certificates\") pod \"kube-apiserver-minikube\" (UID: \"55b4bbe24dac3803a7379f9ae169d6ba\") " pod="kube-system/kube-apiserver-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984407    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"ca-certs\" (UniqueName: \"kubernetes.io/host-path/7da72fc2e2cfb27aacf6cffd1c72da00-ca-certs\") pod \"kube-controller-manager-minikube\" (UID: \"7da72fc2e2cfb27aacf6cffd1c72da00\") " pod="kube-system/kube-controller-manager-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984419    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"flexvolume-dir\" (UniqueName: \"kubernetes.io/host-path/7da72fc2e2cfb27aacf6cffd1c72da00-flexvolume-dir\") pod \"kube-controller-manager-minikube\" (UID: \"7da72fc2e2cfb27aacf6cffd1c72da00\") " pod="kube-system/kube-controller-manager-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984430    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"kubeconfig\" (UniqueName: \"kubernetes.io/host-path/75ac196d3709dde303d8a81c035c2c28-kubeconfig\") pod \"kube-scheduler-minikube\" (UID: \"75ac196d3709dde303d8a81c035c2c28\") " pod="kube-system/kube-scheduler-minikube"
Mar 02 19:22:23 minikube kubelet[2567]: I0302 19:22:23.984441    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"etcd-certs\" (UniqueName: \"kubernetes.io/host-path/9aac5b5c8815def09a2ef9e37b89da55-etcd-certs\") pod \"etcd-minikube\" (UID: \"9aac5b5c8815def09a2ef9e37b89da55\") " pod="kube-system/etcd-minikube"
Mar 02 19:22:24 minikube kubelet[2567]: I0302 19:22:24.772833    2567 apiserver.go:52] "Watching apiserver"
Mar 02 19:22:24 minikube kubelet[2567]: I0302 19:22:24.783929    2567 desired_state_of_world_populator.go:159] "Finished populating initial desired state of world"
Mar 02 19:22:24 minikube kubelet[2567]: E0302 19:22:24.882569    2567 kubelet.go:1890] "Failed creating a mirror pod for" err="pods \"etcd-minikube\" already exists" pod="kube-system/etcd-minikube"
Mar 02 19:22:24 minikube kubelet[2567]: E0302 19:22:24.883104    2567 kubelet.go:1890] "Failed creating a mirror pod for" err="pods \"kube-controller-manager-minikube\" already exists" pod="kube-system/kube-controller-manager-minikube"
Mar 02 19:22:24 minikube kubelet[2567]: E0302 19:22:24.883105    2567 kubelet.go:1890] "Failed creating a mirror pod for" err="pods \"kube-apiserver-minikube\" already exists" pod="kube-system/kube-apiserver-minikube"
Mar 02 19:22:24 minikube kubelet[2567]: I0302 19:22:24.889299    2567 pod_startup_latency_tracker.go:102] "Observed pod startup duration" pod="kube-system/etcd-minikube" podStartSLOduration=1.889269415 podCreationTimestamp="2024-03-02 19:22:23 +0000 UTC" firstStartedPulling="0001-01-01 00:00:00 +0000 UTC" lastFinishedPulling="0001-01-01 00:00:00 +0000 UTC" observedRunningTime="2024-03-02 19:22:24.889166264 +0000 UTC m=+1.176919494" watchObservedRunningTime="2024-03-02 19:22:24.889269415 +0000 UTC m=+1.177022643"
Mar 02 19:22:24 minikube kubelet[2567]: I0302 19:22:24.895768    2567 pod_startup_latency_tracker.go:102] "Observed pod startup duration" pod="kube-system/kube-apiserver-minikube" podStartSLOduration=1.8957427550000001 podCreationTimestamp="2024-03-02 19:22:23 +0000 UTC" firstStartedPulling="0001-01-01 00:00:00 +0000 UTC" lastFinishedPulling="0001-01-01 00:00:00 +0000 UTC" observedRunningTime="2024-03-02 19:22:24.895647937 +0000 UTC m=+1.183401164" watchObservedRunningTime="2024-03-02 19:22:24.895742755 +0000 UTC m=+1.183495982"
Mar 02 19:22:24 minikube kubelet[2567]: I0302 19:22:24.901735    2567 pod_startup_latency_tracker.go:102] "Observed pod startup duration" pod="kube-system/kube-scheduler-minikube" podStartSLOduration=1.901697812 podCreationTimestamp="2024-03-02 19:22:23 +0000 UTC" firstStartedPulling="0001-01-01 00:00:00 +0000 UTC" lastFinishedPulling="0001-01-01 00:00:00 +0000 UTC" observedRunningTime="2024-03-02 19:22:24.901565759 +0000 UTC m=+1.189318988" watchObservedRunningTime="2024-03-02 19:22:24.901697812 +0000 UTC m=+1.189451040"
Mar 02 19:22:24 minikube kubelet[2567]: I0302 19:22:24.914474    2567 pod_startup_latency_tracker.go:102] "Observed pod startup duration" pod="kube-system/kube-controller-manager-minikube" podStartSLOduration=1.9144475760000002 podCreationTimestamp="2024-03-02 19:22:23 +0000 UTC" firstStartedPulling="0001-01-01 00:00:00 +0000 UTC" lastFinishedPulling="0001-01-01 00:00:00 +0000 UTC" observedRunningTime="2024-03-02 19:22:24.908160831 +0000 UTC m=+1.195914067" watchObservedRunningTime="2024-03-02 19:22:24.914447576 +0000 UTC m=+1.202200803"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.194039    2567 topology_manager.go:215] "Topology Admit Handler" podUID="5becb18e-091a-4e69-a9fa-a0d22241c525" podNamespace="kube-system" podName="kube-proxy-w94rl"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.230120    2567 topology_manager.go:215] "Topology Admit Handler" podUID="c491964f-c450-4b48-926e-63b23c923129" podNamespace="kube-system" podName="coredns-5dd5756b68-mr5n5"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.235348    2567 topology_manager.go:215] "Topology Admit Handler" podUID="be754d96-b71a-490a-b2e4-c5310a13636c" podNamespace="kube-system" podName="coredns-5dd5756b68-kfz9h"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.371450    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"xtables-lock\" (UniqueName: \"kubernetes.io/host-path/5becb18e-091a-4e69-a9fa-a0d22241c525-xtables-lock\") pod \"kube-proxy-w94rl\" (UID: \"5becb18e-091a-4e69-a9fa-a0d22241c525\") " pod="kube-system/kube-proxy-w94rl"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.371495    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"config-volume\" (UniqueName: \"kubernetes.io/configmap/c491964f-c450-4b48-926e-63b23c923129-config-volume\") pod \"coredns-5dd5756b68-mr5n5\" (UID: \"c491964f-c450-4b48-926e-63b23c923129\") " pod="kube-system/coredns-5dd5756b68-mr5n5"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.371508    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"kube-proxy\" (UniqueName: \"kubernetes.io/configmap/5becb18e-091a-4e69-a9fa-a0d22241c525-kube-proxy\") pod \"kube-proxy-w94rl\" (UID: \"5becb18e-091a-4e69-a9fa-a0d22241c525\") " pod="kube-system/kube-proxy-w94rl"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.371530    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"config-volume\" (UniqueName: \"kubernetes.io/configmap/be754d96-b71a-490a-b2e4-c5310a13636c-config-volume\") pod \"coredns-5dd5756b68-kfz9h\" (UID: \"be754d96-b71a-490a-b2e4-c5310a13636c\") " pod="kube-system/coredns-5dd5756b68-kfz9h"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.371560    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"lib-modules\" (UniqueName: \"kubernetes.io/host-path/5becb18e-091a-4e69-a9fa-a0d22241c525-lib-modules\") pod \"kube-proxy-w94rl\" (UID: \"5becb18e-091a-4e69-a9fa-a0d22241c525\") " pod="kube-system/kube-proxy-w94rl"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.371580    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"kube-api-access-wst25\" (UniqueName: \"kubernetes.io/projected/5becb18e-091a-4e69-a9fa-a0d22241c525-kube-api-access-wst25\") pod \"kube-proxy-w94rl\" (UID: \"5becb18e-091a-4e69-a9fa-a0d22241c525\") " pod="kube-system/kube-proxy-w94rl"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.371596    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"kube-api-access-jv8ln\" (UniqueName: \"kubernetes.io/projected/c491964f-c450-4b48-926e-63b23c923129-kube-api-access-jv8ln\") pod \"coredns-5dd5756b68-mr5n5\" (UID: \"c491964f-c450-4b48-926e-63b23c923129\") " pod="kube-system/coredns-5dd5756b68-mr5n5"
Mar 02 19:22:37 minikube kubelet[2567]: I0302 19:22:37.371618    2567 reconciler_common.go:258] "operationExecutor.VerifyControllerAttachedVolume started for volume \"kube-api-access-fcltb\" (UniqueName: \"kubernetes.io/projected/be754d96-b71a-490a-b2e4-c5310a13636c-kube-api-access-fcltb\") pod \"coredns-5dd5756b68-kfz9h\" (UID: \"be754d96-b71a-490a-b2e4-c5310a13636c\") " pod="kube-system/coredns-5dd5756b68-kfz9h"
Mar 02 19:22:39 minikube kubelet[2567]: I0302 19:22:39.093855    2567 pod_startup_latency_tracker.go:102] "Observed pod startup duration" pod="kube-system/coredns-5dd5756b68-kfz9h" podStartSLOduration=2.093825193 podCreationTimestamp="2024-03-02 19:22:37 +0000 UTC" firstStartedPulling="0001-01-01 00:00:00 +0000 UTC" lastFinishedPulling="0001-01-01 00:00:00 +0000 UTC" observedRunningTime="2024-03-02 19:22:38.164241794 +0000 UTC m=+14.451995081" watchObservedRunningTime="2024-03-02 19:22:39.093825193 +0000 UTC m=+15.381578421"
Mar 02 19:22:39 minikube kubelet[2567]: I0302 19:22:39.093990    2567 pod_startup_latency_tracker.go:102] "Observed pod startup duration" pod="kube-system/kube-proxy-w94rl" podStartSLOduration=2.093978441 podCreationTimestamp="2024-03-02 19:22:37 +0000 UTC" firstStartedPulling="0001-01-01 00:00:00 +0000 UTC" lastFinishedPulling="0001-01-01 00:00:00 +0000 UTC" observedRunningTime="2024-03-02 19:22:39.093572738 +0000 UTC m=+15.381325965" watchObservedRunningTime="2024-03-02 19:22:39.093978441 +0000 UTC m=+15.381731668"
Mar 02 19:22:39 minikube kubelet[2567]: I0302 19:22:39.100824    2567 pod_startup_latency_tracker.go:102] "Observed pod startup duration" pod="kube-system/coredns-5dd5756b68-mr5n5" podStartSLOduration=2.100785721 podCreationTimestamp="2024-03-02 19:22:37 +0000 UTC" firstStartedPulling="0001-01-01 00:00:00 +0000 UTC" lastFinishedPulling="0001-01-01 00:00:00 +0000 UTC" observedRunningTime="2024-03-02 19:22:39.100529699 +0000 UTC m=+15.388282927" watchObservedRunningTime="2024-03-02 19:22:39.100785721 +0000 UTC m=+15.388538950"
Mar 02 19:22:44 minikube kubelet[2567]: I0302 19:22:44.563218    2567 kuberuntime_manager.go:1523] "Updating runtime config through cri with podcidr" CIDR="10.244.0.0/24"
Mar 02 19:22:44 minikube kubelet[2567]: I0302 19:22:44.564181    2567 kubelet_network.go:61] "Updating Pod CIDR" originalPodCIDR="" newPodCIDR="10.244.0.0/24"

